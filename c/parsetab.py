
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '0566FAA47A714E1B297191BB51FC277B'
    
_lr_action_items = {'LESS':([76,83,84,86,88,93,97,108,110,133,135,136,141,157,158,],[-87,-76,-88,-82,-86,115,-64,-77,-78,-85,-81,-86,-75,-65,-89,]),'CASE':([31,63,68,69,70,72,73,74,82,85,89,90,91,94,98,99,103,113,126,134,143,151,153,156,161,163,164,165,168,169,171,173,174,],[-9,-94,-10,-42,-94,-44,-41,81,-43,-47,-46,-40,-49,-48,-45,-51,-50,81,-59,81,-60,81,81,81,-54,-57,-56,-52,-55,81,-53,81,-58,]),'SWITCH':([31,63,68,69,70,72,73,74,82,85,89,90,91,94,98,99,103,113,126,134,143,151,153,156,161,163,164,165,168,169,171,173,174,],[-9,-94,-10,-42,-94,-44,-41,77,-43,-47,-46,-40,-49,-48,-45,-51,-50,77,-59,77,-60,77,77,77,-54,-57,-56,-52,-55,77,-53,77,-58,]),'FLOAT':([0,1,2,7,8,11,17,28,31,49,53,60,63,64,68,69,70,73,90,],[6,6,-6,-5,-3,-4,-2,6,-9,-7,6,-8,-94,-32,-10,-42,6,-41,-40,]),'PLUSPLUS':([76,83,84,86,88,97,133,135,136,157,158,],[-87,110,-88,-82,-86,-64,-85,-81,-86,-65,-89,]),'FOR':([31,63,68,69,70,72,73,74,82,85,89,90,91,94,98,99,103,113,126,134,143,151,153,156,161,163,164,165,168,169,171,173,174,],[-9,-94,-10,-42,-94,-44,-41,100,-43,-47,-46,-40,-49,-48,-45,-51,-50,100,-59,100,-60,100,100,100,-54,-57,-56,-52,-55,100,-53,100,-58,]),'INCLUDE':([16,],[24,]),'$end':([1,2,5,7,8,11,17,31,49,60,64,68,90,],[-1,-6,0,-5,-3,-4,-2,-9,-7,-8,-32,-10,-40,]),'BOOLEAN':([0,1,2,7,8,11,17,28,31,49,53,60,63,64,68,69,70,73,90,],[3,3,-6,-5,-3,-4,-2,3,-9,-7,3,-8,-94,-32,-10,-42,3,-41,-40,]),'INT':([0,1,2,7,8,11,17,28,31,49,53,60,63,64,68,69,70,73,90,],[12,12,-6,-5,-3,-4,-2,12,-9,-7,12,-8,-94,-32,-10,-42,12,-41,-40,]),'DIVIDE':([76,83,84,86,88,97,133,135,136,141,157,158,],[-87,106,-88,-82,-86,-64,-85,-81,-86,106,-65,-89,]),'GREATEREQUAL':([76,83,84,86,88,93,97,108,110,133,135,136,141,157,158,],[-87,-76,-88,-82,-86,118,-64,-77,-78,-85,-81,-86,-75,-65,-89,]),'TIMES':([3,4,6,9,10,12,13,14,15,18,27,35,48,52,56,57,75,76,83,84,86,88,97,130,133,135,136,141,157,158,],[-31,-30,-29,-28,18,-24,-25,-26,-27,26,18,18,18,18,18,18,18,-87,109,-88,-82,-86,-64,18,-85,-81,-86,109,-65,-89,]),'DEFINE':([16,],[23,]),'NUMBER':([29,30,31,33,63,68,69,70,72,73,74,80,81,82,85,89,90,91,94,95,98,99,103,106,107,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,134,143,151,153,156,159,160,161,163,164,165,168,169,170,171,173,174,],[45,47,-9,49,-94,-10,-42,-94,-44,-41,84,84,105,-43,-47,-46,-40,-49,-48,84,-45,-51,-50,-84,84,-83,84,84,84,-80,-68,-70,84,-71,-72,-74,-69,84,-79,-73,-59,84,84,84,84,-60,84,84,84,84,84,-54,-57,-56,-52,-55,84,84,-53,84,-58,]),'DEFAULT':([31,63,68,69,70,72,73,74,82,85,89,90,91,94,98,99,103,113,126,134,143,151,153,156,161,163,164,165,168,169,171,173,174,],[-9,-94,-10,-42,-94,-44,-41,92,-43,-47,-46,-40,-49,-48,-45,-51,-50,92,-59,92,-60,92,92,92,-54,-57,-56,-52,-55,92,-53,92,-58,]),'LBRACKET':([19,55,97,101,132,],[30,65,128,30,128,]),'ISEQUAL':([76,83,84,86,88,93,97,108,110,133,135,136,141,157,158,],[-87,-76,-88,-82,-86,120,-64,-77,-78,-85,-81,-86,-75,-65,-89,]),'MINUSMINUS':([76,83,84,86,88,97,133,135,136,157,158,],[-87,108,-88,-82,-86,-64,-85,-81,-86,-65,-89,]),'LONG':([0,1,2,7,8,11,17,28,31,49,53,60,63,64,68,69,70,73,90,],[14,14,-6,-5,-3,-4,-2,14,-9,-7,14,-8,-94,-32,-10,-42,14,-41,-40,]),'LESSEQUAL':([76,83,84,86,88,93,97,108,110,133,135,136,141,157,158,],[-87,-76,-88,-82,-86,121,-64,-77,-78,-85,-81,-86,-75,-65,-89,]),'DOT':([34,],[50,]),'HASHTAG':([0,1,2,7,8,11,17,31,49,60,64,68,90,],[16,16,-6,-5,-3,-4,-2,-9,-7,-8,-32,-10,-40,]),'PLUS':([76,83,84,86,88,93,97,108,110,133,135,136,141,142,157,158,172,],[-87,-76,-88,-82,-86,123,-64,-77,-78,-85,-81,-86,-75,123,-65,-89,123,]),'LBLOCK':([31,54,63,68,69,70,72,73,74,82,85,89,90,91,94,98,99,103,113,126,134,143,151,153,156,161,163,164,165,168,169,171,173,174,],[-9,63,-94,-10,-42,-94,-44,-41,63,-43,-47,-46,-40,-49,-48,-45,-51,-50,63,-59,63,-60,63,63,63,-54,-57,-56,-52,-55,63,-53,63,-58,]),'MINUS':([76,83,84,86,88,93,97,108,110,133,135,136,141,142,157,158,172,],[-87,-76,-88,-82,-86,114,-64,-77,-78,-85,-81,-86,-75,114,-65,-89,114,]),'CHAR':([0,1,2,7,8,11,17,28,31,49,53,60,63,64,68,69,70,73,90,],[4,4,-6,-5,-3,-4,-2,4,-9,-7,4,-8,-94,-32,-10,-42,4,-41,-40,]),'COMMA':([3,4,6,9,10,12,13,14,15,19,25,27,28,32,35,36,38,39,41,42,45,46,48,52,55,56,57,62,71,75,76,79,83,84,86,88,93,97,101,108,110,130,133,135,136,138,141,142,146,149,154,157,158,166,],[-31,-30,-29,-28,21,-24,-25,-26,-27,27,35,21,-94,48,21,52,27,53,-37,-36,56,57,21,21,-38,21,21,-35,-39,21,-87,-62,-76,-88,-82,-86,-67,-64,27,-77,-78,21,-85,-81,-86,-61,-75,-66,-93,159,-63,-65,-89,-92,]),'RETURN':([31,63,68,69,70,72,73,74,82,85,89,90,91,94,98,99,103,113,126,134,143,151,153,156,161,163,164,165,168,169,171,173,174,],[-9,-94,-10,-42,-94,-44,-41,95,-43,-47,-46,-40,-49,-48,-45,-51,-50,95,-59,95,-60,95,95,95,-54,-57,-56,-52,-55,95,-53,95,-58,]),'LPAREN':([19,31,63,68,69,70,72,73,74,77,80,82,85,87,89,90,91,94,95,96,97,98,99,100,103,106,107,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,134,143,151,153,156,159,160,161,163,164,165,168,169,170,171,173,174,],[28,-9,-94,-10,-42,-94,-44,-41,80,102,80,-43,-47,111,-46,-40,-49,-48,80,127,129,-45,-51,130,-50,-84,80,-83,80,80,80,-80,-68,-70,80,-71,-72,-74,-69,80,-79,-73,-59,80,80,80,80,-60,80,80,80,80,80,-54,-57,-56,-52,-55,80,80,-53,80,-58,]),'ELSE':([85,89,90,91,94,98,99,103,126,143,161,163,164,165,168,171,174,],[-47,-46,-40,-49,-48,-45,-51,-50,-59,-60,-54,-57,-56,169,-55,-53,-58,]),'EQUAL':([19,38,88,97,101,157,],[29,29,112,-64,29,-65,]),'DEQUAL':([76,83,84,86,88,93,97,108,110,133,135,136,141,157,158,],[-87,-76,-88,-82,-86,119,-64,-77,-78,-85,-81,-86,-75,-65,-89,]),'DOUBLE':([0,1,2,7,8,11,17,28,31,49,53,60,63,64,68,69,70,73,90,],[9,9,-6,-5,-3,-4,-2,9,-9,-7,9,-8,-94,-32,-10,-42,9,-41,-40,]),'AMPERSANT':([3,4,6,9,10,12,13,14,15,27,35,48,52,56,57,75,112,130,],[-31,-30,-29,-28,22,-24,-25,-26,-27,22,22,22,22,22,22,22,139,22,]),'RBRACKET':([47,65,76,79,83,84,86,88,93,97,108,110,133,135,136,138,141,142,145,154,157,158,],[58,71,-87,-62,-76,-88,-82,-86,-67,-64,-77,-78,-85,-81,-86,-61,-75,-66,157,-63,-65,-89,]),'GREATER':([76,83,84,86,88,93,97,108,110,133,135,136,141,157,158,],[-87,-76,-88,-82,-86,116,-64,-77,-78,-85,-81,-86,-75,-65,-89,]),'WHILE':([31,63,68,69,70,72,73,74,82,85,89,90,91,94,98,99,103,113,126,134,143,151,153,156,161,163,164,165,168,169,171,173,174,],[-9,-94,-10,-42,-94,-44,-41,87,-43,-47,-46,-40,-49,-48,-45,-51,-50,87,-59,87,-60,87,87,87,-54,-57,-56,-52,-55,87,-53,87,-58,]),'COLON':([92,105,],[113,134,]),'BREAK':([85,89,90,91,94,98,99,103,126,140,143,152,161,163,164,165,168,171,174,],[-47,-46,-40,-49,-48,-45,-51,-50,-59,155,-60,162,-54,-57,-56,-52,-55,-53,-58,]),'RBLOCK':([31,63,68,69,70,72,73,74,82,85,89,90,91,94,98,99,103,126,143,161,163,164,165,168,171,174,],[-9,-94,-10,-42,-94,-44,-41,90,-43,-47,-46,-40,-49,-48,-45,-51,-50,-59,-60,-54,-57,-56,-52,-55,-53,-58,]),'ID':([3,4,6,9,10,12,13,14,15,18,22,23,24,26,27,29,31,35,40,44,48,50,52,56,57,63,68,69,70,72,73,74,75,80,82,85,89,90,91,94,95,98,99,102,103,106,107,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,130,134,139,143,151,153,156,159,160,161,163,164,165,168,169,170,171,173,174,],[-31,-30,-29,-28,19,-24,-25,-26,-27,25,32,33,34,36,38,46,-9,38,-25,55,38,60,38,38,38,-94,-10,-42,-94,-44,-41,97,101,97,-43,-47,-46,-40,-49,-48,97,-45,-51,132,-50,-84,97,-83,97,97,97,-80,-68,-70,97,-71,-72,-74,-69,97,-79,-73,-59,97,97,97,38,97,154,-60,97,97,97,97,97,-54,-57,-56,-52,-55,97,97,-53,97,-58,]),'SEMICOLON':([19,20,21,25,31,32,36,37,38,45,46,51,58,59,61,63,66,67,68,69,70,72,73,74,76,78,79,82,83,84,85,86,88,89,90,91,93,94,95,97,98,99,101,103,108,110,113,125,126,133,134,135,136,138,141,142,143,150,151,153,154,155,156,157,158,161,162,163,164,165,167,168,169,171,173,174,],[-12,31,-19,-16,-9,-22,-20,-11,-12,-14,-18,-15,68,-23,-21,-94,-13,-17,-10,-42,-94,-44,-41,99,-87,103,-62,-43,-76,-88,-47,-82,-86,-46,-40,-49,-67,-48,126,-64,-45,-51,-12,-50,-77,-78,99,143,-59,-85,99,-81,-86,-61,-75,-66,-60,160,99,99,-63,164,99,-65,-89,-54,168,-57,-56,-52,170,-55,99,-53,99,-58,]),'VOID':([0,1,2,7,8,11,17,28,31,49,53,60,63,64,68,69,70,73,90,],[13,13,-6,-5,-3,-4,-2,40,-9,-7,13,-8,-94,-32,-10,-42,13,-41,-40,]),'SHORT':([0,1,2,7,8,11,17,28,31,49,53,60,63,64,68,69,70,73,90,],[15,15,-6,-5,-3,-4,-2,15,-9,-7,15,-8,-94,-32,-10,-42,15,-41,-40,]),'IF':([31,63,68,69,70,72,73,74,82,85,89,90,91,94,98,99,103,113,126,134,143,151,153,156,161,163,164,165,168,169,171,173,174,],[-9,-94,-10,-42,-94,-44,-41,96,-43,-47,-46,-40,-49,-48,-45,-51,-50,96,-59,96,-60,96,96,96,-54,-57,-56,-52,-55,96,-53,96,-58,]),'DISTINT':([76,83,84,86,88,93,97,108,110,133,135,136,141,157,158,],[-87,-76,-88,-82,-86,124,-64,-77,-78,-85,-81,-86,-75,-65,-89,]),'RPAREN':([28,39,40,41,42,43,55,62,71,76,79,83,84,86,88,93,97,104,108,110,129,131,132,133,135,136,137,138,141,142,144,146,147,148,149,154,157,158,166,172,],[-94,-33,-34,-37,-36,54,-38,-35,-39,-87,-62,-76,-88,-82,-86,-67,-64,133,-77,-78,-94,151,-64,-85,-81,-86,153,-61,-75,-66,156,-93,-91,158,-90,-63,-65,-89,-92,173,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'call':([74,80,95,107,111,112,113,117,122,127,128,129,134,151,153,156,159,160,169,170,173,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'declaration_list':([0,],[1,]),'header_declaration':([0,1,],[2,2,]),'var':([74,80,95,102,107,111,112,113,117,122,127,128,129,134,151,153,156,159,160,169,170,173,],[88,88,88,131,136,88,88,88,136,136,88,88,88,88,88,88,88,88,88,88,136,88,]),'program':([0,],[5,]),'statement':([74,113,134,151,153,156,169,173,],[82,140,152,161,163,165,171,174,]),'expression':([74,80,95,111,112,113,127,128,129,134,151,153,156,159,160,169,173,],[78,104,125,137,138,78,144,145,146,78,78,78,78,166,167,78,78,]),'fun_declaration':([0,1,],[7,7,]),'declaration':([0,1,],[8,17,]),'var_declaration2':([10,27,35,48,52,56,57,75,130,],[20,37,51,59,61,66,67,20,150,]),'factor':([74,80,95,107,111,112,113,117,122,127,128,129,134,151,153,156,159,160,169,170,173,],[86,86,86,135,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'empty':([28,63,70,129,],[41,69,72,147,]),'addop':([93,142,172,],[117,117,117,]),'param':([28,53,],[42,62,]),'selection_stmt':([74,113,134,151,153,156,169,173,],[85,85,85,85,85,85,85,85,]),'local_declarations':([63,],[70,]),'var_declaration':([0,1,70,],[11,11,73,]),'mulop':([83,141,],[107,107,]),'simple_expression':([74,80,95,111,112,113,127,128,129,134,151,153,156,159,160,169,173,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'compount_stmt':([54,74,113,134,151,153,156,169,173,],[64,89,89,89,89,89,89,89,89,]),'term':([74,80,95,111,112,113,117,122,127,128,129,134,151,153,156,159,160,169,170,173,],[83,83,83,83,83,83,141,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'return_stmt':([74,113,134,151,153,156,169,173,],[91,91,91,91,91,91,91,91,]),'additive_expression':([74,80,95,111,112,113,122,127,128,129,134,151,153,156,159,160,169,170,173,],[93,93,93,93,93,93,142,93,93,93,93,93,93,93,93,93,93,172,93,]),'expression_stmt':([74,113,134,151,153,156,169,173,],[98,98,98,98,98,98,98,98,]),'param_list':([28,],[39,]),'args':([129,],[148,]),'iteration_stmt':([74,113,134,151,153,156,169,173,],[94,94,94,94,94,94,94,94,]),'args_list':([129,],[149,]),'relop':([93,],[122,]),'statement_list':([70,],[74,]),'type_specifier':([0,1,28,53,70,],[10,10,44,44,75,]),'params':([28,],[43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','minic_parser.py',9),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','minic_parser.py',13),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','minic_parser.py',17),
  ('declaration -> var_declaration','declaration',1,'p_declaration','minic_parser.py',21),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','minic_parser.py',22),
  ('declaration -> header_declaration','declaration',1,'p_declaration','minic_parser.py',23),
  ('header_declaration -> HASHTAG DEFINE ID NUMBER','header_declaration',4,'p_header_declaration_1','minic_parser.py',27),
  ('header_declaration -> HASHTAG INCLUDE ID DOT ID','header_declaration',5,'p_header_declaration_2','minic_parser.py',31),
  ('var_declaration -> type_specifier var_declaration2 SEMICOLON','var_declaration',3,'p_var_declaration_1','minic_parser.py',35),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration_2','minic_parser.py',39),
  ('var_declaration2 -> ID COMMA var_declaration2','var_declaration2',3,'p_var_declaration_3','minic_parser.py',43),
  ('var_declaration2 -> ID','var_declaration2',1,'p_var_declaration_3','minic_parser.py',44),
  ('var_declaration2 -> ID EQUAL NUMBER COMMA var_declaration2','var_declaration2',5,'p_var_declaration_3','minic_parser.py',45),
  ('var_declaration2 -> ID EQUAL NUMBER','var_declaration2',3,'p_var_declaration_3','minic_parser.py',46),
  ('var_declaration2 -> TIMES ID COMMA var_declaration2','var_declaration2',4,'p_var_declaration_3','minic_parser.py',47),
  ('var_declaration2 -> TIMES ID','var_declaration2',2,'p_var_declaration_3','minic_parser.py',48),
  ('var_declaration2 -> ID EQUAL ID COMMA var_declaration2','var_declaration2',5,'p_var_declaration_3','minic_parser.py',49),
  ('var_declaration2 -> ID EQUAL ID','var_declaration2',3,'p_var_declaration_3','minic_parser.py',50),
  ('var_declaration2 -> COMMA','var_declaration2',1,'p_var_declaration_3','minic_parser.py',51),
  ('var_declaration2 -> TIMES TIMES ID','var_declaration2',3,'p_var_declaration_3','minic_parser.py',52),
  ('var_declaration2 -> TIMES TIMES ID COMMA var_declaration2','var_declaration2',5,'p_var_declaration_3','minic_parser.py',53),
  ('var_declaration2 -> AMPERSANT ID','var_declaration2',2,'p_var_declaration_3','minic_parser.py',54),
  ('var_declaration2 -> AMPERSANT ID COMMA var_declaration2','var_declaration2',4,'p_var_declaration_3','minic_parser.py',55),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_1','minic_parser.py',61),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier_2','minic_parser.py',65),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier_3','minic_parser.py',69),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier_4','minic_parser.py',73),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier_5','minic_parser.py',77),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier_6','minic_parser.py',81),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier_7','minic_parser.py',85),
  ('type_specifier -> BOOLEAN','type_specifier',1,'p_type_specifier_8','minic_parser.py',89),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt','fun_declaration',6,'p_fun_declaration','minic_parser.py',93),
  ('params -> param_list','params',1,'p_params_1','minic_parser.py',97),
  ('params -> VOID','params',1,'p_params_2','minic_parser.py',101),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_1','minic_parser.py',105),
  ('param_list -> param','param_list',1,'p_param_list_2','minic_parser.py',109),
  ('param_list -> empty','param_list',1,'p_param_list_3','minic_parser.py',113),
  ('param -> type_specifier ID','param',2,'p_param_1','minic_parser.py',117),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param_2','minic_parser.py',121),
  ('compount_stmt -> LBLOCK local_declarations statement_list RBLOCK','compount_stmt',4,'p_compount_stmt','minic_parser.py',125),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations_1','minic_parser.py',129),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations_2','minic_parser.py',133),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','minic_parser.py',137),
  ('statement_list -> empty','statement_list',1,'p_statement_list_2','minic_parser.py',141),
  ('statement -> expression_stmt','statement',1,'p_statement','minic_parser.py',145),
  ('statement -> compount_stmt','statement',1,'p_statement','minic_parser.py',146),
  ('statement -> selection_stmt','statement',1,'p_statement','minic_parser.py',147),
  ('statement -> iteration_stmt','statement',1,'p_statement','minic_parser.py',148),
  ('statement -> return_stmt','statement',1,'p_statement','minic_parser.py',149),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt_1','minic_parser.py',154),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt_2','minic_parser.py',158),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt_1','minic_parser.py',162),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt_2','minic_parser.py',166),
  ('selection_stmt -> SWITCH LPAREN var RPAREN statement','selection_stmt',5,'p_selection_stmt_3','minic_parser.py',170),
  ('selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON','selection_stmt',6,'p_selection_stmt_4','minic_parser.py',174),
  ('selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON','selection_stmt',5,'p_selection_stmt_5','minic_parser.py',178),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt_1','minic_parser.py',182),
  ('iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement','iteration_stmt',9,'p_iteration_stmt_2','minic_parser.py',188),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt_1','minic_parser.py',192),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt_2','minic_parser.py',196),
  ('expression -> var EQUAL expression','expression',3,'p_expression_1','minic_parser.py',200),
  ('expression -> simple_expression','expression',1,'p_expression_2','minic_parser.py',204),
  ('expression -> var EQUAL AMPERSANT ID','expression',4,'p_expression_3','minic_parser.py',208),
  ('var -> ID','var',1,'p_var_1','minic_parser.py',212),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var_2','minic_parser.py',216),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_1','minic_parser.py',220),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_2','minic_parser.py',224),
  ('relop -> LESS','relop',1,'p_relop','minic_parser.py',229),
  ('relop -> LESSEQUAL','relop',1,'p_relop','minic_parser.py',230),
  ('relop -> GREATER','relop',1,'p_relop','minic_parser.py',231),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','minic_parser.py',232),
  ('relop -> DEQUAL','relop',1,'p_relop','minic_parser.py',233),
  ('relop -> DISTINT','relop',1,'p_relop','minic_parser.py',234),
  ('relop -> ISEQUAL','relop',1,'p_relop','minic_parser.py',235),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_1','minic_parser.py',240),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_2','minic_parser.py',246),
  ('additive_expression -> term MINUSMINUS','additive_expression',2,'p_additive_expression_3','minic_parser.py',250),
  ('additive_expression -> term PLUSPLUS','additive_expression',2,'p_additive_expression_4','minic_parser.py',254),
  ('addop -> PLUS','addop',1,'p_addop','minic_parser.py',258),
  ('addop -> MINUS','addop',1,'p_addop','minic_parser.py',259),
  ('term -> term mulop factor','term',3,'p_term_1','minic_parser.py',264),
  ('term -> factor','term',1,'p_term_2','minic_parser.py',268),
  ('mulop -> TIMES','mulop',1,'p_mulop','minic_parser.py',274),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','minic_parser.py',275),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_1','minic_parser.py',280),
  ('factor -> var','factor',1,'p_factor_2','minic_parser.py',284),
  ('factor -> call','factor',1,'p_factor_3','minic_parser.py',288),
  ('factor -> NUMBER','factor',1,'p_factor_4','minic_parser.py',292),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','minic_parser.py',298),
  ('args -> args_list','args',1,'p_args','minic_parser.py',302),
  ('args -> empty','args',1,'p_args','minic_parser.py',303),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list_1','minic_parser.py',308),
  ('args_list -> expression','args_list',1,'p_args_list_2','minic_parser.py',312),
  ('empty -> <empty>','empty',0,'p_empty','minic_parser.py',316),
]
