Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     declaration -> header_declaration
Rule 7     header_declaration -> HASHTAG DEFINE ID NUMBER
Rule 8     header_declaration -> HASHTAG INCLUDE ID DOT ID
Rule 9     var_declaration -> type_specifier var_declaration2 SEMICOLON
Rule 10    var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
Rule 11    var_declaration2 -> ID COMMA var_declaration2
Rule 12    var_declaration2 -> ID
Rule 13    var_declaration2 -> ID EQUAL NUMBER COMMA var_declaration2
Rule 14    var_declaration2 -> ID EQUAL NUMBER
Rule 15    var_declaration2 -> TIMES ID COMMA var_declaration2
Rule 16    var_declaration2 -> TIMES ID
Rule 17    var_declaration2 -> ID EQUAL ID COMMA var_declaration2
Rule 18    var_declaration2 -> ID EQUAL ID
Rule 19    var_declaration2 -> COMMA
Rule 20    var_declaration2 -> TIMES TIMES ID
Rule 21    var_declaration2 -> TIMES TIMES ID COMMA var_declaration2
Rule 22    var_declaration2 -> AMPERSANT ID
Rule 23    var_declaration2 -> AMPERSANT ID COMMA var_declaration2
Rule 24    type_specifier -> INT
Rule 25    type_specifier -> VOID
Rule 26    type_specifier -> LONG
Rule 27    type_specifier -> SHORT
Rule 28    type_specifier -> DOUBLE
Rule 29    type_specifier -> FLOAT
Rule 30    type_specifier -> CHAR
Rule 31    type_specifier -> BOOLEAN
Rule 32    fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt
Rule 33    params -> param_list
Rule 34    params -> VOID
Rule 35    param_list -> param_list COMMA param
Rule 36    param_list -> param
Rule 37    param_list -> empty
Rule 38    param -> type_specifier ID
Rule 39    param -> type_specifier ID LBRACKET RBRACKET
Rule 40    compount_stmt -> LBLOCK local_declarations statement_list RBLOCK
Rule 41    local_declarations -> local_declarations var_declaration
Rule 42    local_declarations -> empty
Rule 43    statement_list -> statement_list statement
Rule 44    statement_list -> empty
Rule 45    statement -> expression_stmt
Rule 46    statement -> compount_stmt
Rule 47    statement -> selection_stmt
Rule 48    statement -> iteration_stmt
Rule 49    statement -> return_stmt
Rule 50    expression_stmt -> expression SEMICOLON
Rule 51    expression_stmt -> SEMICOLON
Rule 52    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 53    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 54    selection_stmt -> SWITCH LPAREN var RPAREN statement
Rule 55    selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON
Rule 56    selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON
Rule 57    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 58    iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
Rule 59    return_stmt -> RETURN SEMICOLON
Rule 60    return_stmt -> RETURN expression SEMICOLON
Rule 61    expression -> var EQUAL expression
Rule 62    expression -> simple_expression
Rule 63    expression -> var EQUAL AMPERSANT ID
Rule 64    var -> ID
Rule 65    var -> ID LBRACKET expression RBRACKET
Rule 66    simple_expression -> additive_expression relop additive_expression
Rule 67    simple_expression -> additive_expression
Rule 68    relop -> LESS
Rule 69    relop -> LESSEQUAL
Rule 70    relop -> GREATER
Rule 71    relop -> GREATEREQUAL
Rule 72    relop -> DEQUAL
Rule 73    relop -> DISTINT
Rule 74    relop -> ISEQUAL
Rule 75    additive_expression -> additive_expression addop term
Rule 76    additive_expression -> term
Rule 77    additive_expression -> term MINUSMINUS
Rule 78    additive_expression -> term PLUSPLUS
Rule 79    addop -> PLUS
Rule 80    addop -> MINUS
Rule 81    term -> term mulop factor
Rule 82    term -> factor
Rule 83    mulop -> TIMES
Rule 84    mulop -> DIVIDE
Rule 85    factor -> LPAREN expression RPAREN
Rule 86    factor -> var
Rule 87    factor -> call
Rule 88    factor -> NUMBER
Rule 89    call -> ID LPAREN args RPAREN
Rule 90    args -> args_list
Rule 91    args -> empty
Rule 92    args_list -> args_list COMMA expression
Rule 93    args_list -> expression
Rule 94    empty -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 22 23 63
BOOLEAN              : 31
BREAK                : 55 56
CASE                 : 55
CHAR                 : 30
COLON                : 55 56
COMMA                : 11 13 15 17 19 21 23 35 92
DEFAULT              : 56
DEFINE               : 7
DEQUAL               : 72
DISTINT              : 73
DIVIDE               : 84
DOT                  : 8
DOUBLE               : 28
ELSE                 : 53
EQUAL                : 13 14 17 18 61 63
FLOAT                : 29
FOR                  : 58
GREATER              : 70
GREATEREQUAL         : 71
HASHTAG              : 7 8
ID                   : 7 8 8 10 11 12 13 14 15 16 17 17 18 18 20 21 22 23 32 38 39 63 64 65 89
IF                   : 52 53
INCLUDE              : 8
INT                  : 24
ISEQUAL              : 74
LBLOCK               : 40
LBRACKET             : 10 39 65
LESS                 : 68
LESSEQUAL            : 69
LONG                 : 26
LPAREN               : 32 52 53 54 57 58 85 89
MINUS                : 80
MINUSMINUS           : 77
NUMBER               : 7 10 13 14 55 88
PLUS                 : 79
PLUSPLUS             : 78
RBLOCK               : 40
RBRACKET             : 10 39 65
RETURN               : 59 60
RPAREN               : 32 52 53 54 57 58 85 89
SEMICOLON            : 9 10 50 51 55 56 58 58 59 60
SHORT                : 27
SWITCH               : 54
TIMES                : 15 16 20 20 21 21 83
VOID                 : 25 34
WHILE                : 57
error                : 

Nonterminals, with rules where they appear

additive_expression  : 58 66 66 67 75
addop                : 75
args                 : 89
args_list            : 90 92
call                 : 87
compount_stmt        : 32 46
declaration          : 2 3
declaration_list     : 1 2
empty                : 37 42 44 91
expression           : 50 52 53 57 58 60 61 65 85 92 93
expression_stmt      : 45
factor               : 81 82
fun_declaration      : 5
header_declaration   : 6
iteration_stmt       : 48
local_declarations   : 40 41
mulop                : 81
param                : 35 36
param_list           : 33 35
params               : 32
program              : 0
relop                : 66
return_stmt          : 49
selection_stmt       : 47
simple_expression    : 62
statement            : 43 52 53 53 54 55 56 57 58
statement_list       : 40 43
term                 : 75 76 77 78 81
type_specifier       : 9 10 32 38 39
var                  : 54 61 63 86
var_declaration      : 4 41
var_declaration2     : 9 11 13 15 17 21 23 58

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . header_declaration
    (9) var_declaration -> . type_specifier var_declaration2 SEMICOLON
    (10) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (32) fun_declaration -> . type_specifier ID LPAREN params RPAREN compount_stmt
    (7) header_declaration -> . HASHTAG DEFINE ID NUMBER
    (8) header_declaration -> . HASHTAG INCLUDE ID DOT ID
    (24) type_specifier -> . INT
    (25) type_specifier -> . VOID
    (26) type_specifier -> . LONG
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . DOUBLE
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . BOOLEAN

    HASHTAG         shift and go to state 16
    INT             shift and go to state 12
    VOID            shift and go to state 13
    LONG            shift and go to state 14
    SHORT           shift and go to state 15
    DOUBLE          shift and go to state 9
    FLOAT           shift and go to state 6
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 3

    var_declaration                shift and go to state 11
    declaration_list               shift and go to state 1
    header_declaration             shift and go to state 2
    program                        shift and go to state 5
    fun_declaration                shift and go to state 7
    declaration                    shift and go to state 8
    type_specifier                 shift and go to state 10

state 1

    (1) program -> declaration_list .
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . header_declaration
    (9) var_declaration -> . type_specifier var_declaration2 SEMICOLON
    (10) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (32) fun_declaration -> . type_specifier ID LPAREN params RPAREN compount_stmt
    (7) header_declaration -> . HASHTAG DEFINE ID NUMBER
    (8) header_declaration -> . HASHTAG INCLUDE ID DOT ID
    (24) type_specifier -> . INT
    (25) type_specifier -> . VOID
    (26) type_specifier -> . LONG
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . DOUBLE
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . BOOLEAN

    $end            reduce using rule 1 (program -> declaration_list .)
    HASHTAG         shift and go to state 16
    INT             shift and go to state 12
    VOID            shift and go to state 13
    LONG            shift and go to state 14
    SHORT           shift and go to state 15
    DOUBLE          shift and go to state 9
    FLOAT           shift and go to state 6
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 3

    var_declaration                shift and go to state 11
    header_declaration             shift and go to state 2
    fun_declaration                shift and go to state 7
    declaration                    shift and go to state 17
    type_specifier                 shift and go to state 10

state 2

    (6) declaration -> header_declaration .

    HASHTAG         reduce using rule 6 (declaration -> header_declaration .)
    INT             reduce using rule 6 (declaration -> header_declaration .)
    VOID            reduce using rule 6 (declaration -> header_declaration .)
    LONG            reduce using rule 6 (declaration -> header_declaration .)
    SHORT           reduce using rule 6 (declaration -> header_declaration .)
    DOUBLE          reduce using rule 6 (declaration -> header_declaration .)
    FLOAT           reduce using rule 6 (declaration -> header_declaration .)
    CHAR            reduce using rule 6 (declaration -> header_declaration .)
    BOOLEAN         reduce using rule 6 (declaration -> header_declaration .)
    $end            reduce using rule 6 (declaration -> header_declaration .)


state 3

    (31) type_specifier -> BOOLEAN .

    ID              reduce using rule 31 (type_specifier -> BOOLEAN .)
    TIMES           reduce using rule 31 (type_specifier -> BOOLEAN .)
    COMMA           reduce using rule 31 (type_specifier -> BOOLEAN .)
    AMPERSANT       reduce using rule 31 (type_specifier -> BOOLEAN .)


state 4

    (30) type_specifier -> CHAR .

    ID              reduce using rule 30 (type_specifier -> CHAR .)
    TIMES           reduce using rule 30 (type_specifier -> CHAR .)
    COMMA           reduce using rule 30 (type_specifier -> CHAR .)
    AMPERSANT       reduce using rule 30 (type_specifier -> CHAR .)


state 5

    (0) S' -> program .



state 6

    (29) type_specifier -> FLOAT .

    ID              reduce using rule 29 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 29 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 29 (type_specifier -> FLOAT .)
    AMPERSANT       reduce using rule 29 (type_specifier -> FLOAT .)


state 7

    (5) declaration -> fun_declaration .

    HASHTAG         reduce using rule 5 (declaration -> fun_declaration .)
    INT             reduce using rule 5 (declaration -> fun_declaration .)
    VOID            reduce using rule 5 (declaration -> fun_declaration .)
    LONG            reduce using rule 5 (declaration -> fun_declaration .)
    SHORT           reduce using rule 5 (declaration -> fun_declaration .)
    DOUBLE          reduce using rule 5 (declaration -> fun_declaration .)
    FLOAT           reduce using rule 5 (declaration -> fun_declaration .)
    CHAR            reduce using rule 5 (declaration -> fun_declaration .)
    BOOLEAN         reduce using rule 5 (declaration -> fun_declaration .)
    $end            reduce using rule 5 (declaration -> fun_declaration .)


state 8

    (3) declaration_list -> declaration .

    HASHTAG         reduce using rule 3 (declaration_list -> declaration .)
    INT             reduce using rule 3 (declaration_list -> declaration .)
    VOID            reduce using rule 3 (declaration_list -> declaration .)
    LONG            reduce using rule 3 (declaration_list -> declaration .)
    SHORT           reduce using rule 3 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 3 (declaration_list -> declaration .)
    FLOAT           reduce using rule 3 (declaration_list -> declaration .)
    CHAR            reduce using rule 3 (declaration_list -> declaration .)
    BOOLEAN         reduce using rule 3 (declaration_list -> declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration .)


state 9

    (28) type_specifier -> DOUBLE .

    ID              reduce using rule 28 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 28 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 28 (type_specifier -> DOUBLE .)
    AMPERSANT       reduce using rule 28 (type_specifier -> DOUBLE .)


state 10

    (9) var_declaration -> type_specifier . var_declaration2 SEMICOLON
    (10) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON
    (32) fun_declaration -> type_specifier . ID LPAREN params RPAREN compount_stmt
    (11) var_declaration2 -> . ID COMMA var_declaration2
    (12) var_declaration2 -> . ID
    (13) var_declaration2 -> . ID EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> . ID EQUAL NUMBER
    (15) var_declaration2 -> . TIMES ID COMMA var_declaration2
    (16) var_declaration2 -> . TIMES ID
    (17) var_declaration2 -> . ID EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> . ID EQUAL ID
    (19) var_declaration2 -> . COMMA
    (20) var_declaration2 -> . TIMES TIMES ID
    (21) var_declaration2 -> . TIMES TIMES ID COMMA var_declaration2
    (22) var_declaration2 -> . AMPERSANT ID
    (23) var_declaration2 -> . AMPERSANT ID COMMA var_declaration2

    ID              shift and go to state 19
    TIMES           shift and go to state 18
    COMMA           shift and go to state 21
    AMPERSANT       shift and go to state 22

    var_declaration2               shift and go to state 20

state 11

    (4) declaration -> var_declaration .

    HASHTAG         reduce using rule 4 (declaration -> var_declaration .)
    INT             reduce using rule 4 (declaration -> var_declaration .)
    VOID            reduce using rule 4 (declaration -> var_declaration .)
    LONG            reduce using rule 4 (declaration -> var_declaration .)
    SHORT           reduce using rule 4 (declaration -> var_declaration .)
    DOUBLE          reduce using rule 4 (declaration -> var_declaration .)
    FLOAT           reduce using rule 4 (declaration -> var_declaration .)
    CHAR            reduce using rule 4 (declaration -> var_declaration .)
    BOOLEAN         reduce using rule 4 (declaration -> var_declaration .)
    $end            reduce using rule 4 (declaration -> var_declaration .)


state 12

    (24) type_specifier -> INT .

    ID              reduce using rule 24 (type_specifier -> INT .)
    TIMES           reduce using rule 24 (type_specifier -> INT .)
    COMMA           reduce using rule 24 (type_specifier -> INT .)
    AMPERSANT       reduce using rule 24 (type_specifier -> INT .)


state 13

    (25) type_specifier -> VOID .

    ID              reduce using rule 25 (type_specifier -> VOID .)
    TIMES           reduce using rule 25 (type_specifier -> VOID .)
    COMMA           reduce using rule 25 (type_specifier -> VOID .)
    AMPERSANT       reduce using rule 25 (type_specifier -> VOID .)


state 14

    (26) type_specifier -> LONG .

    ID              reduce using rule 26 (type_specifier -> LONG .)
    TIMES           reduce using rule 26 (type_specifier -> LONG .)
    COMMA           reduce using rule 26 (type_specifier -> LONG .)
    AMPERSANT       reduce using rule 26 (type_specifier -> LONG .)


state 15

    (27) type_specifier -> SHORT .

    ID              reduce using rule 27 (type_specifier -> SHORT .)
    TIMES           reduce using rule 27 (type_specifier -> SHORT .)
    COMMA           reduce using rule 27 (type_specifier -> SHORT .)
    AMPERSANT       reduce using rule 27 (type_specifier -> SHORT .)


state 16

    (7) header_declaration -> HASHTAG . DEFINE ID NUMBER
    (8) header_declaration -> HASHTAG . INCLUDE ID DOT ID

    DEFINE          shift and go to state 23
    INCLUDE         shift and go to state 24


state 17

    (2) declaration_list -> declaration_list declaration .

    HASHTAG         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    BOOLEAN         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 18

    (15) var_declaration2 -> TIMES . ID COMMA var_declaration2
    (16) var_declaration2 -> TIMES . ID
    (20) var_declaration2 -> TIMES . TIMES ID
    (21) var_declaration2 -> TIMES . TIMES ID COMMA var_declaration2

    ID              shift and go to state 25
    TIMES           shift and go to state 26


state 19

    (10) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON
    (32) fun_declaration -> type_specifier ID . LPAREN params RPAREN compount_stmt
    (11) var_declaration2 -> ID . COMMA var_declaration2
    (12) var_declaration2 -> ID .
    (13) var_declaration2 -> ID . EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> ID . EQUAL NUMBER
    (17) var_declaration2 -> ID . EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> ID . EQUAL ID

    LBRACKET        shift and go to state 30
    LPAREN          shift and go to state 28
    COMMA           shift and go to state 27
    SEMICOLON       reduce using rule 12 (var_declaration2 -> ID .)
    EQUAL           shift and go to state 29


state 20

    (9) var_declaration -> type_specifier var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 31


state 21

    (19) var_declaration2 -> COMMA .

    SEMICOLON       reduce using rule 19 (var_declaration2 -> COMMA .)


state 22

    (22) var_declaration2 -> AMPERSANT . ID
    (23) var_declaration2 -> AMPERSANT . ID COMMA var_declaration2

    ID              shift and go to state 32


state 23

    (7) header_declaration -> HASHTAG DEFINE . ID NUMBER

    ID              shift and go to state 33


state 24

    (8) header_declaration -> HASHTAG INCLUDE . ID DOT ID

    ID              shift and go to state 34


state 25

    (15) var_declaration2 -> TIMES ID . COMMA var_declaration2
    (16) var_declaration2 -> TIMES ID .

    COMMA           shift and go to state 35
    SEMICOLON       reduce using rule 16 (var_declaration2 -> TIMES ID .)


state 26

    (20) var_declaration2 -> TIMES TIMES . ID
    (21) var_declaration2 -> TIMES TIMES . ID COMMA var_declaration2

    ID              shift and go to state 36


state 27

    (11) var_declaration2 -> ID COMMA . var_declaration2
    (11) var_declaration2 -> . ID COMMA var_declaration2
    (12) var_declaration2 -> . ID
    (13) var_declaration2 -> . ID EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> . ID EQUAL NUMBER
    (15) var_declaration2 -> . TIMES ID COMMA var_declaration2
    (16) var_declaration2 -> . TIMES ID
    (17) var_declaration2 -> . ID EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> . ID EQUAL ID
    (19) var_declaration2 -> . COMMA
    (20) var_declaration2 -> . TIMES TIMES ID
    (21) var_declaration2 -> . TIMES TIMES ID COMMA var_declaration2
    (22) var_declaration2 -> . AMPERSANT ID
    (23) var_declaration2 -> . AMPERSANT ID COMMA var_declaration2

    ID              shift and go to state 38
    TIMES           shift and go to state 18
    COMMA           shift and go to state 21
    AMPERSANT       shift and go to state 22

    var_declaration2               shift and go to state 37

state 28

    (32) fun_declaration -> type_specifier ID LPAREN . params RPAREN compount_stmt
    (33) params -> . param_list
    (34) params -> . VOID
    (35) param_list -> . param_list COMMA param
    (36) param_list -> . param
    (37) param_list -> . empty
    (38) param -> . type_specifier ID
    (39) param -> . type_specifier ID LBRACKET RBRACKET
    (94) empty -> .
    (24) type_specifier -> . INT
    (25) type_specifier -> . VOID
    (26) type_specifier -> . LONG
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . DOUBLE
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . BOOLEAN

    VOID            shift and go to state 40
    COMMA           reduce using rule 94 (empty -> .)
    RPAREN          reduce using rule 94 (empty -> .)
    INT             shift and go to state 12
    LONG            shift and go to state 14
    SHORT           shift and go to state 15
    DOUBLE          shift and go to state 9
    FLOAT           shift and go to state 6
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 3

    param_list                     shift and go to state 39
    empty                          shift and go to state 41
    param                          shift and go to state 42
    params                         shift and go to state 43
    type_specifier                 shift and go to state 44

state 29

    (13) var_declaration2 -> ID EQUAL . NUMBER COMMA var_declaration2
    (14) var_declaration2 -> ID EQUAL . NUMBER
    (17) var_declaration2 -> ID EQUAL . ID COMMA var_declaration2
    (18) var_declaration2 -> ID EQUAL . ID

    NUMBER          shift and go to state 45
    ID              shift and go to state 46


state 30

    (10) var_declaration -> type_specifier ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER          shift and go to state 47


state 31

    (9) var_declaration -> type_specifier var_declaration2 SEMICOLON .

    INT             reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    VOID            reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    LONG            reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    SHORT           reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    DOUBLE          reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    FLOAT           reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    CHAR            reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    BOOLEAN         reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    SEMICOLON       reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    LBLOCK          reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    IF              reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    SWITCH          reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    CASE            reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    DEFAULT         reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    WHILE           reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    FOR             reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    RETURN          reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    ID              reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    LPAREN          reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    NUMBER          reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    HASHTAG         reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)
    $end            reduce using rule 9 (var_declaration -> type_specifier var_declaration2 SEMICOLON .)


state 32

    (22) var_declaration2 -> AMPERSANT ID .
    (23) var_declaration2 -> AMPERSANT ID . COMMA var_declaration2

    SEMICOLON       reduce using rule 22 (var_declaration2 -> AMPERSANT ID .)
    COMMA           shift and go to state 48


state 33

    (7) header_declaration -> HASHTAG DEFINE ID . NUMBER

    NUMBER          shift and go to state 49


state 34

    (8) header_declaration -> HASHTAG INCLUDE ID . DOT ID

    DOT             shift and go to state 50


state 35

    (15) var_declaration2 -> TIMES ID COMMA . var_declaration2
    (11) var_declaration2 -> . ID COMMA var_declaration2
    (12) var_declaration2 -> . ID
    (13) var_declaration2 -> . ID EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> . ID EQUAL NUMBER
    (15) var_declaration2 -> . TIMES ID COMMA var_declaration2
    (16) var_declaration2 -> . TIMES ID
    (17) var_declaration2 -> . ID EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> . ID EQUAL ID
    (19) var_declaration2 -> . COMMA
    (20) var_declaration2 -> . TIMES TIMES ID
    (21) var_declaration2 -> . TIMES TIMES ID COMMA var_declaration2
    (22) var_declaration2 -> . AMPERSANT ID
    (23) var_declaration2 -> . AMPERSANT ID COMMA var_declaration2

    ID              shift and go to state 38
    TIMES           shift and go to state 18
    COMMA           shift and go to state 21
    AMPERSANT       shift and go to state 22

    var_declaration2               shift and go to state 51

state 36

    (20) var_declaration2 -> TIMES TIMES ID .
    (21) var_declaration2 -> TIMES TIMES ID . COMMA var_declaration2

    SEMICOLON       reduce using rule 20 (var_declaration2 -> TIMES TIMES ID .)
    COMMA           shift and go to state 52


state 37

    (11) var_declaration2 -> ID COMMA var_declaration2 .

    SEMICOLON       reduce using rule 11 (var_declaration2 -> ID COMMA var_declaration2 .)


state 38

    (11) var_declaration2 -> ID . COMMA var_declaration2
    (12) var_declaration2 -> ID .
    (13) var_declaration2 -> ID . EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> ID . EQUAL NUMBER
    (17) var_declaration2 -> ID . EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> ID . EQUAL ID

    COMMA           shift and go to state 27
    SEMICOLON       reduce using rule 12 (var_declaration2 -> ID .)
    EQUAL           shift and go to state 29


state 39

    (33) params -> param_list .
    (35) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 33 (params -> param_list .)
    COMMA           shift and go to state 53


state 40

    (34) params -> VOID .
    (25) type_specifier -> VOID .

    RPAREN          reduce using rule 34 (params -> VOID .)
    ID              reduce using rule 25 (type_specifier -> VOID .)


state 41

    (37) param_list -> empty .

    COMMA           reduce using rule 37 (param_list -> empty .)
    RPAREN          reduce using rule 37 (param_list -> empty .)


state 42

    (36) param_list -> param .

    COMMA           reduce using rule 36 (param_list -> param .)
    RPAREN          reduce using rule 36 (param_list -> param .)


state 43

    (32) fun_declaration -> type_specifier ID LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 54


state 44

    (38) param -> type_specifier . ID
    (39) param -> type_specifier . ID LBRACKET RBRACKET

    ID              shift and go to state 55


state 45

    (13) var_declaration2 -> ID EQUAL NUMBER . COMMA var_declaration2
    (14) var_declaration2 -> ID EQUAL NUMBER .

    COMMA           shift and go to state 56
    SEMICOLON       reduce using rule 14 (var_declaration2 -> ID EQUAL NUMBER .)


state 46

    (17) var_declaration2 -> ID EQUAL ID . COMMA var_declaration2
    (18) var_declaration2 -> ID EQUAL ID .

    COMMA           shift and go to state 57
    SEMICOLON       reduce using rule 18 (var_declaration2 -> ID EQUAL ID .)


state 47

    (10) var_declaration -> type_specifier ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 58


state 48

    (23) var_declaration2 -> AMPERSANT ID COMMA . var_declaration2
    (11) var_declaration2 -> . ID COMMA var_declaration2
    (12) var_declaration2 -> . ID
    (13) var_declaration2 -> . ID EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> . ID EQUAL NUMBER
    (15) var_declaration2 -> . TIMES ID COMMA var_declaration2
    (16) var_declaration2 -> . TIMES ID
    (17) var_declaration2 -> . ID EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> . ID EQUAL ID
    (19) var_declaration2 -> . COMMA
    (20) var_declaration2 -> . TIMES TIMES ID
    (21) var_declaration2 -> . TIMES TIMES ID COMMA var_declaration2
    (22) var_declaration2 -> . AMPERSANT ID
    (23) var_declaration2 -> . AMPERSANT ID COMMA var_declaration2

    ID              shift and go to state 38
    TIMES           shift and go to state 18
    COMMA           shift and go to state 21
    AMPERSANT       shift and go to state 22

    var_declaration2               shift and go to state 59

state 49

    (7) header_declaration -> HASHTAG DEFINE ID NUMBER .

    HASHTAG         reduce using rule 7 (header_declaration -> HASHTAG DEFINE ID NUMBER .)
    INT             reduce using rule 7 (header_declaration -> HASHTAG DEFINE ID NUMBER .)
    VOID            reduce using rule 7 (header_declaration -> HASHTAG DEFINE ID NUMBER .)
    LONG            reduce using rule 7 (header_declaration -> HASHTAG DEFINE ID NUMBER .)
    SHORT           reduce using rule 7 (header_declaration -> HASHTAG DEFINE ID NUMBER .)
    DOUBLE          reduce using rule 7 (header_declaration -> HASHTAG DEFINE ID NUMBER .)
    FLOAT           reduce using rule 7 (header_declaration -> HASHTAG DEFINE ID NUMBER .)
    CHAR            reduce using rule 7 (header_declaration -> HASHTAG DEFINE ID NUMBER .)
    BOOLEAN         reduce using rule 7 (header_declaration -> HASHTAG DEFINE ID NUMBER .)
    $end            reduce using rule 7 (header_declaration -> HASHTAG DEFINE ID NUMBER .)


state 50

    (8) header_declaration -> HASHTAG INCLUDE ID DOT . ID

    ID              shift and go to state 60


state 51

    (15) var_declaration2 -> TIMES ID COMMA var_declaration2 .

    SEMICOLON       reduce using rule 15 (var_declaration2 -> TIMES ID COMMA var_declaration2 .)


state 52

    (21) var_declaration2 -> TIMES TIMES ID COMMA . var_declaration2
    (11) var_declaration2 -> . ID COMMA var_declaration2
    (12) var_declaration2 -> . ID
    (13) var_declaration2 -> . ID EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> . ID EQUAL NUMBER
    (15) var_declaration2 -> . TIMES ID COMMA var_declaration2
    (16) var_declaration2 -> . TIMES ID
    (17) var_declaration2 -> . ID EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> . ID EQUAL ID
    (19) var_declaration2 -> . COMMA
    (20) var_declaration2 -> . TIMES TIMES ID
    (21) var_declaration2 -> . TIMES TIMES ID COMMA var_declaration2
    (22) var_declaration2 -> . AMPERSANT ID
    (23) var_declaration2 -> . AMPERSANT ID COMMA var_declaration2

    ID              shift and go to state 38
    TIMES           shift and go to state 18
    COMMA           shift and go to state 21
    AMPERSANT       shift and go to state 22

    var_declaration2               shift and go to state 61

state 53

    (35) param_list -> param_list COMMA . param
    (38) param -> . type_specifier ID
    (39) param -> . type_specifier ID LBRACKET RBRACKET
    (24) type_specifier -> . INT
    (25) type_specifier -> . VOID
    (26) type_specifier -> . LONG
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . DOUBLE
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . BOOLEAN

    INT             shift and go to state 12
    VOID            shift and go to state 13
    LONG            shift and go to state 14
    SHORT           shift and go to state 15
    DOUBLE          shift and go to state 9
    FLOAT           shift and go to state 6
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 3

    param                          shift and go to state 62
    type_specifier                 shift and go to state 44

state 54

    (32) fun_declaration -> type_specifier ID LPAREN params RPAREN . compount_stmt
    (40) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK

    LBLOCK          shift and go to state 63

    compount_stmt                  shift and go to state 64

state 55

    (38) param -> type_specifier ID .
    (39) param -> type_specifier ID . LBRACKET RBRACKET

    COMMA           reduce using rule 38 (param -> type_specifier ID .)
    RPAREN          reduce using rule 38 (param -> type_specifier ID .)
    LBRACKET        shift and go to state 65


state 56

    (13) var_declaration2 -> ID EQUAL NUMBER COMMA . var_declaration2
    (11) var_declaration2 -> . ID COMMA var_declaration2
    (12) var_declaration2 -> . ID
    (13) var_declaration2 -> . ID EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> . ID EQUAL NUMBER
    (15) var_declaration2 -> . TIMES ID COMMA var_declaration2
    (16) var_declaration2 -> . TIMES ID
    (17) var_declaration2 -> . ID EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> . ID EQUAL ID
    (19) var_declaration2 -> . COMMA
    (20) var_declaration2 -> . TIMES TIMES ID
    (21) var_declaration2 -> . TIMES TIMES ID COMMA var_declaration2
    (22) var_declaration2 -> . AMPERSANT ID
    (23) var_declaration2 -> . AMPERSANT ID COMMA var_declaration2

    ID              shift and go to state 38
    TIMES           shift and go to state 18
    COMMA           shift and go to state 21
    AMPERSANT       shift and go to state 22

    var_declaration2               shift and go to state 66

state 57

    (17) var_declaration2 -> ID EQUAL ID COMMA . var_declaration2
    (11) var_declaration2 -> . ID COMMA var_declaration2
    (12) var_declaration2 -> . ID
    (13) var_declaration2 -> . ID EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> . ID EQUAL NUMBER
    (15) var_declaration2 -> . TIMES ID COMMA var_declaration2
    (16) var_declaration2 -> . TIMES ID
    (17) var_declaration2 -> . ID EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> . ID EQUAL ID
    (19) var_declaration2 -> . COMMA
    (20) var_declaration2 -> . TIMES TIMES ID
    (21) var_declaration2 -> . TIMES TIMES ID COMMA var_declaration2
    (22) var_declaration2 -> . AMPERSANT ID
    (23) var_declaration2 -> . AMPERSANT ID COMMA var_declaration2

    ID              shift and go to state 38
    TIMES           shift and go to state 18
    COMMA           shift and go to state 21
    AMPERSANT       shift and go to state 22

    var_declaration2               shift and go to state 67

state 58

    (10) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 68


state 59

    (23) var_declaration2 -> AMPERSANT ID COMMA var_declaration2 .

    SEMICOLON       reduce using rule 23 (var_declaration2 -> AMPERSANT ID COMMA var_declaration2 .)


state 60

    (8) header_declaration -> HASHTAG INCLUDE ID DOT ID .

    HASHTAG         reduce using rule 8 (header_declaration -> HASHTAG INCLUDE ID DOT ID .)
    INT             reduce using rule 8 (header_declaration -> HASHTAG INCLUDE ID DOT ID .)
    VOID            reduce using rule 8 (header_declaration -> HASHTAG INCLUDE ID DOT ID .)
    LONG            reduce using rule 8 (header_declaration -> HASHTAG INCLUDE ID DOT ID .)
    SHORT           reduce using rule 8 (header_declaration -> HASHTAG INCLUDE ID DOT ID .)
    DOUBLE          reduce using rule 8 (header_declaration -> HASHTAG INCLUDE ID DOT ID .)
    FLOAT           reduce using rule 8 (header_declaration -> HASHTAG INCLUDE ID DOT ID .)
    CHAR            reduce using rule 8 (header_declaration -> HASHTAG INCLUDE ID DOT ID .)
    BOOLEAN         reduce using rule 8 (header_declaration -> HASHTAG INCLUDE ID DOT ID .)
    $end            reduce using rule 8 (header_declaration -> HASHTAG INCLUDE ID DOT ID .)


state 61

    (21) var_declaration2 -> TIMES TIMES ID COMMA var_declaration2 .

    SEMICOLON       reduce using rule 21 (var_declaration2 -> TIMES TIMES ID COMMA var_declaration2 .)


state 62

    (35) param_list -> param_list COMMA param .

    COMMA           reduce using rule 35 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 35 (param_list -> param_list COMMA param .)


state 63

    (40) compount_stmt -> LBLOCK . local_declarations statement_list RBLOCK
    (41) local_declarations -> . local_declarations var_declaration
    (42) local_declarations -> . empty
    (94) empty -> .

    INT             reduce using rule 94 (empty -> .)
    VOID            reduce using rule 94 (empty -> .)
    LONG            reduce using rule 94 (empty -> .)
    SHORT           reduce using rule 94 (empty -> .)
    DOUBLE          reduce using rule 94 (empty -> .)
    FLOAT           reduce using rule 94 (empty -> .)
    CHAR            reduce using rule 94 (empty -> .)
    BOOLEAN         reduce using rule 94 (empty -> .)
    RBLOCK          reduce using rule 94 (empty -> .)
    SEMICOLON       reduce using rule 94 (empty -> .)
    LBLOCK          reduce using rule 94 (empty -> .)
    IF              reduce using rule 94 (empty -> .)
    SWITCH          reduce using rule 94 (empty -> .)
    CASE            reduce using rule 94 (empty -> .)
    DEFAULT         reduce using rule 94 (empty -> .)
    WHILE           reduce using rule 94 (empty -> .)
    FOR             reduce using rule 94 (empty -> .)
    RETURN          reduce using rule 94 (empty -> .)
    ID              reduce using rule 94 (empty -> .)
    LPAREN          reduce using rule 94 (empty -> .)
    NUMBER          reduce using rule 94 (empty -> .)

    empty                          shift and go to state 69
    local_declarations             shift and go to state 70

state 64

    (32) fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .

    HASHTAG         reduce using rule 32 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    INT             reduce using rule 32 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    VOID            reduce using rule 32 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    LONG            reduce using rule 32 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    SHORT           reduce using rule 32 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    DOUBLE          reduce using rule 32 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    FLOAT           reduce using rule 32 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    CHAR            reduce using rule 32 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    BOOLEAN         reduce using rule 32 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    $end            reduce using rule 32 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)


state 65

    (39) param -> type_specifier ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 71


state 66

    (13) var_declaration2 -> ID EQUAL NUMBER COMMA var_declaration2 .

    SEMICOLON       reduce using rule 13 (var_declaration2 -> ID EQUAL NUMBER COMMA var_declaration2 .)


state 67

    (17) var_declaration2 -> ID EQUAL ID COMMA var_declaration2 .

    SEMICOLON       reduce using rule 17 (var_declaration2 -> ID EQUAL ID COMMA var_declaration2 .)


state 68

    (10) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .

    INT             reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    VOID            reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LONG            reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    SHORT           reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    CHAR            reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RBLOCK          reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LBLOCK          reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    IF              reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    CASE            reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    WHILE           reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    FOR             reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RETURN          reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    ID              reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    HASHTAG         reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    $end            reduce using rule 10 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)


state 69

    (42) local_declarations -> empty .

    INT             reduce using rule 42 (local_declarations -> empty .)
    VOID            reduce using rule 42 (local_declarations -> empty .)
    LONG            reduce using rule 42 (local_declarations -> empty .)
    SHORT           reduce using rule 42 (local_declarations -> empty .)
    DOUBLE          reduce using rule 42 (local_declarations -> empty .)
    FLOAT           reduce using rule 42 (local_declarations -> empty .)
    CHAR            reduce using rule 42 (local_declarations -> empty .)
    BOOLEAN         reduce using rule 42 (local_declarations -> empty .)
    RBLOCK          reduce using rule 42 (local_declarations -> empty .)
    SEMICOLON       reduce using rule 42 (local_declarations -> empty .)
    LBLOCK          reduce using rule 42 (local_declarations -> empty .)
    IF              reduce using rule 42 (local_declarations -> empty .)
    SWITCH          reduce using rule 42 (local_declarations -> empty .)
    CASE            reduce using rule 42 (local_declarations -> empty .)
    DEFAULT         reduce using rule 42 (local_declarations -> empty .)
    WHILE           reduce using rule 42 (local_declarations -> empty .)
    FOR             reduce using rule 42 (local_declarations -> empty .)
    RETURN          reduce using rule 42 (local_declarations -> empty .)
    ID              reduce using rule 42 (local_declarations -> empty .)
    LPAREN          reduce using rule 42 (local_declarations -> empty .)
    NUMBER          reduce using rule 42 (local_declarations -> empty .)


state 70

    (40) compount_stmt -> LBLOCK local_declarations . statement_list RBLOCK
    (41) local_declarations -> local_declarations . var_declaration
    (43) statement_list -> . statement_list statement
    (44) statement_list -> . empty
    (9) var_declaration -> . type_specifier var_declaration2 SEMICOLON
    (10) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (94) empty -> .
    (24) type_specifier -> . INT
    (25) type_specifier -> . VOID
    (26) type_specifier -> . LONG
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . DOUBLE
    (29) type_specifier -> . FLOAT
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . BOOLEAN

    RBLOCK          reduce using rule 94 (empty -> .)
    SEMICOLON       reduce using rule 94 (empty -> .)
    LBLOCK          reduce using rule 94 (empty -> .)
    IF              reduce using rule 94 (empty -> .)
    SWITCH          reduce using rule 94 (empty -> .)
    CASE            reduce using rule 94 (empty -> .)
    DEFAULT         reduce using rule 94 (empty -> .)
    WHILE           reduce using rule 94 (empty -> .)
    FOR             reduce using rule 94 (empty -> .)
    RETURN          reduce using rule 94 (empty -> .)
    ID              reduce using rule 94 (empty -> .)
    LPAREN          reduce using rule 94 (empty -> .)
    NUMBER          reduce using rule 94 (empty -> .)
    INT             shift and go to state 12
    VOID            shift and go to state 13
    LONG            shift and go to state 14
    SHORT           shift and go to state 15
    DOUBLE          shift and go to state 9
    FLOAT           shift and go to state 6
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 3

    var_declaration                shift and go to state 73
    empty                          shift and go to state 72
    statement_list                 shift and go to state 74
    type_specifier                 shift and go to state 75

state 71

    (39) param -> type_specifier ID LBRACKET RBRACKET .

    COMMA           reduce using rule 39 (param -> type_specifier ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 39 (param -> type_specifier ID LBRACKET RBRACKET .)


state 72

    (44) statement_list -> empty .

    RBLOCK          reduce using rule 44 (statement_list -> empty .)
    SEMICOLON       reduce using rule 44 (statement_list -> empty .)
    LBLOCK          reduce using rule 44 (statement_list -> empty .)
    IF              reduce using rule 44 (statement_list -> empty .)
    SWITCH          reduce using rule 44 (statement_list -> empty .)
    CASE            reduce using rule 44 (statement_list -> empty .)
    DEFAULT         reduce using rule 44 (statement_list -> empty .)
    WHILE           reduce using rule 44 (statement_list -> empty .)
    FOR             reduce using rule 44 (statement_list -> empty .)
    RETURN          reduce using rule 44 (statement_list -> empty .)
    ID              reduce using rule 44 (statement_list -> empty .)
    LPAREN          reduce using rule 44 (statement_list -> empty .)
    NUMBER          reduce using rule 44 (statement_list -> empty .)


state 73

    (41) local_declarations -> local_declarations var_declaration .

    INT             reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    VOID            reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    LONG            reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    SHORT           reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    DOUBLE          reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    FLOAT           reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    CHAR            reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    BOOLEAN         reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    SEMICOLON       reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    SWITCH          reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    CASE            reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    DEFAULT         reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    ID              reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 41 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 41 (local_declarations -> local_declarations var_declaration .)


state 74

    (40) compount_stmt -> LBLOCK local_declarations statement_list . RBLOCK
    (43) statement_list -> statement_list . statement
    (45) statement -> . expression_stmt
    (46) statement -> . compount_stmt
    (47) statement -> . selection_stmt
    (48) statement -> . iteration_stmt
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (40) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (55) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (56) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (57) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (59) return_stmt -> . RETURN SEMICOLON
    (60) return_stmt -> . RETURN expression SEMICOLON
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    RBLOCK          shift and go to state 90
    SEMICOLON       shift and go to state 99
    LBLOCK          shift and go to state 63
    IF              shift and go to state 96
    SWITCH          shift and go to state 77
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 92
    WHILE           shift and go to state 87
    FOR             shift and go to state 100
    RETURN          shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    compount_stmt                  shift and go to state 89
    term                           shift and go to state 83
    statement                      shift and go to state 82
    expression                     shift and go to state 78
    return_stmt                    shift and go to state 91
    factor                         shift and go to state 86
    iteration_stmt                 shift and go to state 94
    expression_stmt                shift and go to state 98
    selection_stmt                 shift and go to state 85

state 75

    (9) var_declaration -> type_specifier . var_declaration2 SEMICOLON
    (10) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON
    (11) var_declaration2 -> . ID COMMA var_declaration2
    (12) var_declaration2 -> . ID
    (13) var_declaration2 -> . ID EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> . ID EQUAL NUMBER
    (15) var_declaration2 -> . TIMES ID COMMA var_declaration2
    (16) var_declaration2 -> . TIMES ID
    (17) var_declaration2 -> . ID EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> . ID EQUAL ID
    (19) var_declaration2 -> . COMMA
    (20) var_declaration2 -> . TIMES TIMES ID
    (21) var_declaration2 -> . TIMES TIMES ID COMMA var_declaration2
    (22) var_declaration2 -> . AMPERSANT ID
    (23) var_declaration2 -> . AMPERSANT ID COMMA var_declaration2

    ID              shift and go to state 101
    TIMES           shift and go to state 18
    COMMA           shift and go to state 21
    AMPERSANT       shift and go to state 22

    var_declaration2               shift and go to state 20

state 76

    (87) factor -> call .

    MINUSMINUS      reduce using rule 87 (factor -> call .)
    PLUSPLUS        reduce using rule 87 (factor -> call .)
    TIMES           reduce using rule 87 (factor -> call .)
    DIVIDE          reduce using rule 87 (factor -> call .)
    LESS            reduce using rule 87 (factor -> call .)
    LESSEQUAL       reduce using rule 87 (factor -> call .)
    GREATER         reduce using rule 87 (factor -> call .)
    GREATEREQUAL    reduce using rule 87 (factor -> call .)
    DEQUAL          reduce using rule 87 (factor -> call .)
    DISTINT         reduce using rule 87 (factor -> call .)
    ISEQUAL         reduce using rule 87 (factor -> call .)
    PLUS            reduce using rule 87 (factor -> call .)
    MINUS           reduce using rule 87 (factor -> call .)
    SEMICOLON       reduce using rule 87 (factor -> call .)
    COMMA           reduce using rule 87 (factor -> call .)
    RPAREN          reduce using rule 87 (factor -> call .)
    RBRACKET        reduce using rule 87 (factor -> call .)


state 77

    (54) selection_stmt -> SWITCH . LPAREN var RPAREN statement

    LPAREN          shift and go to state 102


state 78

    (50) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 103


state 79

    (62) expression -> simple_expression .

    RPAREN          reduce using rule 62 (expression -> simple_expression .)
    COMMA           reduce using rule 62 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 62 (expression -> simple_expression .)
    RBRACKET        reduce using rule 62 (expression -> simple_expression .)


state 80

    (85) factor -> LPAREN . expression RPAREN
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    var                            shift and go to state 88
    simple_expression              shift and go to state 79
    term                           shift and go to state 83
    expression                     shift and go to state 104
    factor                         shift and go to state 86

state 81

    (55) selection_stmt -> CASE . NUMBER COLON statement BREAK SEMICOLON

    NUMBER          shift and go to state 105


state 82

    (43) statement_list -> statement_list statement .

    RBLOCK          reduce using rule 43 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 43 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 43 (statement_list -> statement_list statement .)
    IF              reduce using rule 43 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 43 (statement_list -> statement_list statement .)
    CASE            reduce using rule 43 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 43 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 43 (statement_list -> statement_list statement .)
    FOR             reduce using rule 43 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 43 (statement_list -> statement_list statement .)
    ID              reduce using rule 43 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 43 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 43 (statement_list -> statement_list statement .)


state 83

    (76) additive_expression -> term .
    (77) additive_expression -> term . MINUSMINUS
    (78) additive_expression -> term . PLUSPLUS
    (81) term -> term . mulop factor
    (83) mulop -> . TIMES
    (84) mulop -> . DIVIDE

    LESS            reduce using rule 76 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 76 (additive_expression -> term .)
    GREATER         reduce using rule 76 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 76 (additive_expression -> term .)
    DEQUAL          reduce using rule 76 (additive_expression -> term .)
    DISTINT         reduce using rule 76 (additive_expression -> term .)
    ISEQUAL         reduce using rule 76 (additive_expression -> term .)
    PLUS            reduce using rule 76 (additive_expression -> term .)
    MINUS           reduce using rule 76 (additive_expression -> term .)
    SEMICOLON       reduce using rule 76 (additive_expression -> term .)
    RPAREN          reduce using rule 76 (additive_expression -> term .)
    RBRACKET        reduce using rule 76 (additive_expression -> term .)
    COMMA           reduce using rule 76 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 108
    PLUSPLUS        shift and go to state 110
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 106

    mulop                          shift and go to state 107

state 84

    (88) factor -> NUMBER .

    MINUSMINUS      reduce using rule 88 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 88 (factor -> NUMBER .)
    TIMES           reduce using rule 88 (factor -> NUMBER .)
    DIVIDE          reduce using rule 88 (factor -> NUMBER .)
    LESS            reduce using rule 88 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 88 (factor -> NUMBER .)
    GREATER         reduce using rule 88 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 88 (factor -> NUMBER .)
    DEQUAL          reduce using rule 88 (factor -> NUMBER .)
    DISTINT         reduce using rule 88 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 88 (factor -> NUMBER .)
    PLUS            reduce using rule 88 (factor -> NUMBER .)
    MINUS           reduce using rule 88 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 88 (factor -> NUMBER .)
    COMMA           reduce using rule 88 (factor -> NUMBER .)
    RPAREN          reduce using rule 88 (factor -> NUMBER .)
    RBRACKET        reduce using rule 88 (factor -> NUMBER .)


state 85

    (47) statement -> selection_stmt .

    RBLOCK          reduce using rule 47 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 47 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 47 (statement -> selection_stmt .)
    IF              reduce using rule 47 (statement -> selection_stmt .)
    SWITCH          reduce using rule 47 (statement -> selection_stmt .)
    CASE            reduce using rule 47 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 47 (statement -> selection_stmt .)
    WHILE           reduce using rule 47 (statement -> selection_stmt .)
    FOR             reduce using rule 47 (statement -> selection_stmt .)
    RETURN          reduce using rule 47 (statement -> selection_stmt .)
    ID              reduce using rule 47 (statement -> selection_stmt .)
    LPAREN          reduce using rule 47 (statement -> selection_stmt .)
    NUMBER          reduce using rule 47 (statement -> selection_stmt .)
    BREAK           reduce using rule 47 (statement -> selection_stmt .)
    ELSE            reduce using rule 47 (statement -> selection_stmt .)


state 86

    (82) term -> factor .

    MINUSMINUS      reduce using rule 82 (term -> factor .)
    PLUSPLUS        reduce using rule 82 (term -> factor .)
    TIMES           reduce using rule 82 (term -> factor .)
    DIVIDE          reduce using rule 82 (term -> factor .)
    LESS            reduce using rule 82 (term -> factor .)
    LESSEQUAL       reduce using rule 82 (term -> factor .)
    GREATER         reduce using rule 82 (term -> factor .)
    GREATEREQUAL    reduce using rule 82 (term -> factor .)
    DEQUAL          reduce using rule 82 (term -> factor .)
    DISTINT         reduce using rule 82 (term -> factor .)
    ISEQUAL         reduce using rule 82 (term -> factor .)
    PLUS            reduce using rule 82 (term -> factor .)
    MINUS           reduce using rule 82 (term -> factor .)
    RPAREN          reduce using rule 82 (term -> factor .)
    SEMICOLON       reduce using rule 82 (term -> factor .)
    RBRACKET        reduce using rule 82 (term -> factor .)
    COMMA           reduce using rule 82 (term -> factor .)


state 87

    (57) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 111


state 88

    (61) expression -> var . EQUAL expression
    (63) expression -> var . EQUAL AMPERSANT ID
    (86) factor -> var .

    EQUAL           shift and go to state 112
    MINUSMINUS      reduce using rule 86 (factor -> var .)
    PLUSPLUS        reduce using rule 86 (factor -> var .)
    TIMES           reduce using rule 86 (factor -> var .)
    DIVIDE          reduce using rule 86 (factor -> var .)
    LESS            reduce using rule 86 (factor -> var .)
    LESSEQUAL       reduce using rule 86 (factor -> var .)
    GREATER         reduce using rule 86 (factor -> var .)
    GREATEREQUAL    reduce using rule 86 (factor -> var .)
    DEQUAL          reduce using rule 86 (factor -> var .)
    DISTINT         reduce using rule 86 (factor -> var .)
    ISEQUAL         reduce using rule 86 (factor -> var .)
    PLUS            reduce using rule 86 (factor -> var .)
    MINUS           reduce using rule 86 (factor -> var .)
    SEMICOLON       reduce using rule 86 (factor -> var .)
    COMMA           reduce using rule 86 (factor -> var .)
    RPAREN          reduce using rule 86 (factor -> var .)
    RBRACKET        reduce using rule 86 (factor -> var .)


state 89

    (46) statement -> compount_stmt .

    RBLOCK          reduce using rule 46 (statement -> compount_stmt .)
    SEMICOLON       reduce using rule 46 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 46 (statement -> compount_stmt .)
    IF              reduce using rule 46 (statement -> compount_stmt .)
    SWITCH          reduce using rule 46 (statement -> compount_stmt .)
    CASE            reduce using rule 46 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 46 (statement -> compount_stmt .)
    WHILE           reduce using rule 46 (statement -> compount_stmt .)
    FOR             reduce using rule 46 (statement -> compount_stmt .)
    RETURN          reduce using rule 46 (statement -> compount_stmt .)
    ID              reduce using rule 46 (statement -> compount_stmt .)
    LPAREN          reduce using rule 46 (statement -> compount_stmt .)
    NUMBER          reduce using rule 46 (statement -> compount_stmt .)
    BREAK           reduce using rule 46 (statement -> compount_stmt .)
    ELSE            reduce using rule 46 (statement -> compount_stmt .)


state 90

    (40) compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .

    RBLOCK          reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    SEMICOLON       reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LBLOCK          reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    IF              reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    SWITCH          reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    CASE            reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    DEFAULT         reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    WHILE           reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    FOR             reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    RETURN          reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ID              reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LPAREN          reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    NUMBER          reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    BREAK           reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ELSE            reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    HASHTAG         reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    INT             reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    VOID            reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LONG            reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    SHORT           reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    DOUBLE          reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    FLOAT           reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    CHAR            reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    BOOLEAN         reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    $end            reduce using rule 40 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)


state 91

    (49) statement -> return_stmt .

    RBLOCK          reduce using rule 49 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 49 (statement -> return_stmt .)
    LBLOCK          reduce using rule 49 (statement -> return_stmt .)
    IF              reduce using rule 49 (statement -> return_stmt .)
    SWITCH          reduce using rule 49 (statement -> return_stmt .)
    CASE            reduce using rule 49 (statement -> return_stmt .)
    DEFAULT         reduce using rule 49 (statement -> return_stmt .)
    WHILE           reduce using rule 49 (statement -> return_stmt .)
    FOR             reduce using rule 49 (statement -> return_stmt .)
    RETURN          reduce using rule 49 (statement -> return_stmt .)
    ID              reduce using rule 49 (statement -> return_stmt .)
    LPAREN          reduce using rule 49 (statement -> return_stmt .)
    NUMBER          reduce using rule 49 (statement -> return_stmt .)
    BREAK           reduce using rule 49 (statement -> return_stmt .)
    ELSE            reduce using rule 49 (statement -> return_stmt .)


state 92

    (56) selection_stmt -> DEFAULT . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 113


state 93

    (66) simple_expression -> additive_expression . relop additive_expression
    (67) simple_expression -> additive_expression .
    (75) additive_expression -> additive_expression . addop term
    (68) relop -> . LESS
    (69) relop -> . LESSEQUAL
    (70) relop -> . GREATER
    (71) relop -> . GREATEREQUAL
    (72) relop -> . DEQUAL
    (73) relop -> . DISTINT
    (74) relop -> . ISEQUAL
    (79) addop -> . PLUS
    (80) addop -> . MINUS

    RPAREN          reduce using rule 67 (simple_expression -> additive_expression .)
    SEMICOLON       reduce using rule 67 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 67 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 67 (simple_expression -> additive_expression .)
    LESS            shift and go to state 115
    LESSEQUAL       shift and go to state 121
    GREATER         shift and go to state 116
    GREATEREQUAL    shift and go to state 118
    DEQUAL          shift and go to state 119
    DISTINT         shift and go to state 124
    ISEQUAL         shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 114

    relop                          shift and go to state 122
    addop                          shift and go to state 117

state 94

    (48) statement -> iteration_stmt .

    RBLOCK          reduce using rule 48 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 48 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 48 (statement -> iteration_stmt .)
    IF              reduce using rule 48 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 48 (statement -> iteration_stmt .)
    CASE            reduce using rule 48 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 48 (statement -> iteration_stmt .)
    WHILE           reduce using rule 48 (statement -> iteration_stmt .)
    FOR             reduce using rule 48 (statement -> iteration_stmt .)
    RETURN          reduce using rule 48 (statement -> iteration_stmt .)
    ID              reduce using rule 48 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 48 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 48 (statement -> iteration_stmt .)
    BREAK           reduce using rule 48 (statement -> iteration_stmt .)
    ELSE            reduce using rule 48 (statement -> iteration_stmt .)


state 95

    (59) return_stmt -> RETURN . SEMICOLON
    (60) return_stmt -> RETURN . expression SEMICOLON
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 126
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    var                            shift and go to state 88
    simple_expression              shift and go to state 79
    term                           shift and go to state 83
    expression                     shift and go to state 125
    factor                         shift and go to state 86

state 96

    (52) selection_stmt -> IF . LPAREN expression RPAREN statement
    (53) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 127


state 97

    (64) var -> ID .
    (65) var -> ID . LBRACKET expression RBRACKET
    (89) call -> ID . LPAREN args RPAREN

    EQUAL           reduce using rule 64 (var -> ID .)
    MINUSMINUS      reduce using rule 64 (var -> ID .)
    PLUSPLUS        reduce using rule 64 (var -> ID .)
    TIMES           reduce using rule 64 (var -> ID .)
    DIVIDE          reduce using rule 64 (var -> ID .)
    LESS            reduce using rule 64 (var -> ID .)
    LESSEQUAL       reduce using rule 64 (var -> ID .)
    GREATER         reduce using rule 64 (var -> ID .)
    GREATEREQUAL    reduce using rule 64 (var -> ID .)
    DEQUAL          reduce using rule 64 (var -> ID .)
    DISTINT         reduce using rule 64 (var -> ID .)
    ISEQUAL         reduce using rule 64 (var -> ID .)
    PLUS            reduce using rule 64 (var -> ID .)
    MINUS           reduce using rule 64 (var -> ID .)
    COMMA           reduce using rule 64 (var -> ID .)
    RPAREN          reduce using rule 64 (var -> ID .)
    SEMICOLON       reduce using rule 64 (var -> ID .)
    RBRACKET        reduce using rule 64 (var -> ID .)
    LBRACKET        shift and go to state 128
    LPAREN          shift and go to state 129


state 98

    (45) statement -> expression_stmt .

    RBLOCK          reduce using rule 45 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 45 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 45 (statement -> expression_stmt .)
    IF              reduce using rule 45 (statement -> expression_stmt .)
    SWITCH          reduce using rule 45 (statement -> expression_stmt .)
    CASE            reduce using rule 45 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 45 (statement -> expression_stmt .)
    WHILE           reduce using rule 45 (statement -> expression_stmt .)
    FOR             reduce using rule 45 (statement -> expression_stmt .)
    RETURN          reduce using rule 45 (statement -> expression_stmt .)
    ID              reduce using rule 45 (statement -> expression_stmt .)
    LPAREN          reduce using rule 45 (statement -> expression_stmt .)
    NUMBER          reduce using rule 45 (statement -> expression_stmt .)
    BREAK           reduce using rule 45 (statement -> expression_stmt .)
    ELSE            reduce using rule 45 (statement -> expression_stmt .)


state 99

    (51) expression_stmt -> SEMICOLON .

    RBLOCK          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 51 (expression_stmt -> SEMICOLON .)
    LBLOCK          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 51 (expression_stmt -> SEMICOLON .)
    SWITCH          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    CASE            reduce using rule 51 (expression_stmt -> SEMICOLON .)
    DEFAULT         reduce using rule 51 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 51 (expression_stmt -> SEMICOLON .)
    FOR             reduce using rule 51 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    ID              reduce using rule 51 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    NUMBER          reduce using rule 51 (expression_stmt -> SEMICOLON .)
    BREAK           reduce using rule 51 (expression_stmt -> SEMICOLON .)
    ELSE            reduce using rule 51 (expression_stmt -> SEMICOLON .)


state 100

    (58) iteration_stmt -> FOR . LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    LPAREN          shift and go to state 130


state 101

    (10) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON
    (11) var_declaration2 -> ID . COMMA var_declaration2
    (12) var_declaration2 -> ID .
    (13) var_declaration2 -> ID . EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> ID . EQUAL NUMBER
    (17) var_declaration2 -> ID . EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> ID . EQUAL ID

    LBRACKET        shift and go to state 30
    COMMA           shift and go to state 27
    SEMICOLON       reduce using rule 12 (var_declaration2 -> ID .)
    EQUAL           shift and go to state 29


state 102

    (54) selection_stmt -> SWITCH LPAREN . var RPAREN statement
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 132

    var                            shift and go to state 131

state 103

    (50) expression_stmt -> expression SEMICOLON .

    RBLOCK          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    SWITCH          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    CASE            reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    DEFAULT         reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    BREAK           reduce using rule 50 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 50 (expression_stmt -> expression SEMICOLON .)


state 104

    (85) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 133


state 105

    (55) selection_stmt -> CASE NUMBER . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 134


state 106

    (84) mulop -> DIVIDE .

    LPAREN          reduce using rule 84 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 84 (mulop -> DIVIDE .)
    ID              reduce using rule 84 (mulop -> DIVIDE .)


state 107

    (81) term -> term mulop . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (89) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84
    ID              shift and go to state 97

    call                           shift and go to state 76
    factor                         shift and go to state 135
    var                            shift and go to state 136

state 108

    (77) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    DISTINT         reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    SEMICOLON       reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 77 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 77 (additive_expression -> term MINUSMINUS .)


state 109

    (83) mulop -> TIMES .

    LPAREN          reduce using rule 83 (mulop -> TIMES .)
    NUMBER          reduce using rule 83 (mulop -> TIMES .)
    ID              reduce using rule 83 (mulop -> TIMES .)


state 110

    (78) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    DISTINT         reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    SEMICOLON       reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 78 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 78 (additive_expression -> term PLUSPLUS .)


state 111

    (57) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    term                           shift and go to state 83
    expression                     shift and go to state 137
    factor                         shift and go to state 86

state 112

    (61) expression -> var EQUAL . expression
    (63) expression -> var EQUAL . AMPERSANT ID
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    AMPERSANT       shift and go to state 139
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    var                            shift and go to state 88
    simple_expression              shift and go to state 79
    term                           shift and go to state 83
    expression                     shift and go to state 138
    factor                         shift and go to state 86

state 113

    (56) selection_stmt -> DEFAULT COLON . statement BREAK SEMICOLON
    (45) statement -> . expression_stmt
    (46) statement -> . compount_stmt
    (47) statement -> . selection_stmt
    (48) statement -> . iteration_stmt
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (40) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (55) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (56) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (57) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (59) return_stmt -> . RETURN SEMICOLON
    (60) return_stmt -> . RETURN expression SEMICOLON
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 99
    LBLOCK          shift and go to state 63
    IF              shift and go to state 96
    SWITCH          shift and go to state 77
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 92
    WHILE           shift and go to state 87
    FOR             shift and go to state 100
    RETURN          shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    compount_stmt                  shift and go to state 89
    term                           shift and go to state 83
    statement                      shift and go to state 140
    expression                     shift and go to state 78
    return_stmt                    shift and go to state 91
    factor                         shift and go to state 86
    iteration_stmt                 shift and go to state 94
    expression_stmt                shift and go to state 98
    selection_stmt                 shift and go to state 85

state 114

    (80) addop -> MINUS .

    LPAREN          reduce using rule 80 (addop -> MINUS .)
    NUMBER          reduce using rule 80 (addop -> MINUS .)
    ID              reduce using rule 80 (addop -> MINUS .)


state 115

    (68) relop -> LESS .

    LPAREN          reduce using rule 68 (relop -> LESS .)
    NUMBER          reduce using rule 68 (relop -> LESS .)
    ID              reduce using rule 68 (relop -> LESS .)


state 116

    (70) relop -> GREATER .

    LPAREN          reduce using rule 70 (relop -> GREATER .)
    NUMBER          reduce using rule 70 (relop -> GREATER .)
    ID              reduce using rule 70 (relop -> GREATER .)


state 117

    (75) additive_expression -> additive_expression addop . term
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (89) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84
    ID              shift and go to state 97

    call                           shift and go to state 76
    factor                         shift and go to state 86
    term                           shift and go to state 141
    var                            shift and go to state 136

state 118

    (71) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 71 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 71 (relop -> GREATEREQUAL .)
    ID              reduce using rule 71 (relop -> GREATEREQUAL .)


state 119

    (72) relop -> DEQUAL .

    LPAREN          reduce using rule 72 (relop -> DEQUAL .)
    NUMBER          reduce using rule 72 (relop -> DEQUAL .)
    ID              reduce using rule 72 (relop -> DEQUAL .)


state 120

    (74) relop -> ISEQUAL .

    LPAREN          reduce using rule 74 (relop -> ISEQUAL .)
    NUMBER          reduce using rule 74 (relop -> ISEQUAL .)
    ID              reduce using rule 74 (relop -> ISEQUAL .)


state 121

    (69) relop -> LESSEQUAL .

    LPAREN          reduce using rule 69 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 69 (relop -> LESSEQUAL .)
    ID              reduce using rule 69 (relop -> LESSEQUAL .)


state 122

    (66) simple_expression -> additive_expression relop . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (89) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84
    ID              shift and go to state 97

    call                           shift and go to state 76
    additive_expression            shift and go to state 142
    factor                         shift and go to state 86
    term                           shift and go to state 83
    var                            shift and go to state 136

state 123

    (79) addop -> PLUS .

    LPAREN          reduce using rule 79 (addop -> PLUS .)
    NUMBER          reduce using rule 79 (addop -> PLUS .)
    ID              reduce using rule 79 (addop -> PLUS .)


state 124

    (73) relop -> DISTINT .

    LPAREN          reduce using rule 73 (relop -> DISTINT .)
    NUMBER          reduce using rule 73 (relop -> DISTINT .)
    ID              reduce using rule 73 (relop -> DISTINT .)


state 125

    (60) return_stmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 143


state 126

    (59) return_stmt -> RETURN SEMICOLON .

    RBLOCK          reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    CASE            reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    BREAK           reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 59 (return_stmt -> RETURN SEMICOLON .)


state 127

    (52) selection_stmt -> IF LPAREN . expression RPAREN statement
    (53) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    term                           shift and go to state 83
    expression                     shift and go to state 144
    factor                         shift and go to state 86

state 128

    (65) var -> ID LBRACKET . expression RBRACKET
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    var                            shift and go to state 88
    simple_expression              shift and go to state 79
    term                           shift and go to state 83
    expression                     shift and go to state 145
    factor                         shift and go to state 86

state 129

    (89) call -> ID LPAREN . args RPAREN
    (90) args -> . args_list
    (91) args -> . empty
    (92) args_list -> . args_list COMMA expression
    (93) args_list -> . expression
    (94) empty -> .
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    RPAREN          reduce using rule 94 (empty -> .)
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    var                            shift and go to state 88
    simple_expression              shift and go to state 79
    term                           shift and go to state 83
    expression                     shift and go to state 146
    empty                          shift and go to state 147
    factor                         shift and go to state 86
    args                           shift and go to state 148
    args_list                      shift and go to state 149

state 130

    (58) iteration_stmt -> FOR LPAREN . var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (11) var_declaration2 -> . ID COMMA var_declaration2
    (12) var_declaration2 -> . ID
    (13) var_declaration2 -> . ID EQUAL NUMBER COMMA var_declaration2
    (14) var_declaration2 -> . ID EQUAL NUMBER
    (15) var_declaration2 -> . TIMES ID COMMA var_declaration2
    (16) var_declaration2 -> . TIMES ID
    (17) var_declaration2 -> . ID EQUAL ID COMMA var_declaration2
    (18) var_declaration2 -> . ID EQUAL ID
    (19) var_declaration2 -> . COMMA
    (20) var_declaration2 -> . TIMES TIMES ID
    (21) var_declaration2 -> . TIMES TIMES ID COMMA var_declaration2
    (22) var_declaration2 -> . AMPERSANT ID
    (23) var_declaration2 -> . AMPERSANT ID COMMA var_declaration2

    ID              shift and go to state 38
    TIMES           shift and go to state 18
    COMMA           shift and go to state 21
    AMPERSANT       shift and go to state 22

    var_declaration2               shift and go to state 150

state 131

    (54) selection_stmt -> SWITCH LPAREN var . RPAREN statement

    RPAREN          shift and go to state 151


state 132

    (64) var -> ID .
    (65) var -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 64 (var -> ID .)
    LBRACKET        shift and go to state 128


state 133

    (85) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 85 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 85 (factor -> LPAREN expression RPAREN .)


state 134

    (55) selection_stmt -> CASE NUMBER COLON . statement BREAK SEMICOLON
    (45) statement -> . expression_stmt
    (46) statement -> . compount_stmt
    (47) statement -> . selection_stmt
    (48) statement -> . iteration_stmt
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (40) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (55) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (56) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (57) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (59) return_stmt -> . RETURN SEMICOLON
    (60) return_stmt -> . RETURN expression SEMICOLON
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 99
    LBLOCK          shift and go to state 63
    IF              shift and go to state 96
    SWITCH          shift and go to state 77
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 92
    WHILE           shift and go to state 87
    FOR             shift and go to state 100
    RETURN          shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    compount_stmt                  shift and go to state 89
    term                           shift and go to state 83
    statement                      shift and go to state 152
    expression                     shift and go to state 78
    return_stmt                    shift and go to state 91
    factor                         shift and go to state 86
    iteration_stmt                 shift and go to state 94
    expression_stmt                shift and go to state 98
    selection_stmt                 shift and go to state 85

state 135

    (81) term -> term mulop factor .

    MINUSMINUS      reduce using rule 81 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 81 (term -> term mulop factor .)
    TIMES           reduce using rule 81 (term -> term mulop factor .)
    DIVIDE          reduce using rule 81 (term -> term mulop factor .)
    LESS            reduce using rule 81 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 81 (term -> term mulop factor .)
    GREATER         reduce using rule 81 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 81 (term -> term mulop factor .)
    DEQUAL          reduce using rule 81 (term -> term mulop factor .)
    DISTINT         reduce using rule 81 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 81 (term -> term mulop factor .)
    PLUS            reduce using rule 81 (term -> term mulop factor .)
    MINUS           reduce using rule 81 (term -> term mulop factor .)
    RPAREN          reduce using rule 81 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 81 (term -> term mulop factor .)
    RBRACKET        reduce using rule 81 (term -> term mulop factor .)
    COMMA           reduce using rule 81 (term -> term mulop factor .)


state 136

    (86) factor -> var .

    MINUSMINUS      reduce using rule 86 (factor -> var .)
    PLUSPLUS        reduce using rule 86 (factor -> var .)
    TIMES           reduce using rule 86 (factor -> var .)
    DIVIDE          reduce using rule 86 (factor -> var .)
    LESS            reduce using rule 86 (factor -> var .)
    LESSEQUAL       reduce using rule 86 (factor -> var .)
    GREATER         reduce using rule 86 (factor -> var .)
    GREATEREQUAL    reduce using rule 86 (factor -> var .)
    DEQUAL          reduce using rule 86 (factor -> var .)
    DISTINT         reduce using rule 86 (factor -> var .)
    ISEQUAL         reduce using rule 86 (factor -> var .)
    PLUS            reduce using rule 86 (factor -> var .)
    MINUS           reduce using rule 86 (factor -> var .)
    SEMICOLON       reduce using rule 86 (factor -> var .)
    RPAREN          reduce using rule 86 (factor -> var .)
    RBRACKET        reduce using rule 86 (factor -> var .)
    COMMA           reduce using rule 86 (factor -> var .)


state 137

    (57) iteration_stmt -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 153


state 138

    (61) expression -> var EQUAL expression .

    RPAREN          reduce using rule 61 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 61 (expression -> var EQUAL expression .)
    SEMICOLON       reduce using rule 61 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 61 (expression -> var EQUAL expression .)


state 139

    (63) expression -> var EQUAL AMPERSANT . ID

    ID              shift and go to state 154


state 140

    (56) selection_stmt -> DEFAULT COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 155


state 141

    (75) additive_expression -> additive_expression addop term .
    (81) term -> term . mulop factor
    (83) mulop -> . TIMES
    (84) mulop -> . DIVIDE

    LESS            reduce using rule 75 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 75 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 75 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 75 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 75 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 75 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 75 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 75 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 75 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 75 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 75 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 75 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 75 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 106

    mulop                          shift and go to state 107

state 142

    (66) simple_expression -> additive_expression relop additive_expression .
    (75) additive_expression -> additive_expression . addop term
    (79) addop -> . PLUS
    (80) addop -> . MINUS

    RPAREN          reduce using rule 66 (simple_expression -> additive_expression relop additive_expression .)
    SEMICOLON       reduce using rule 66 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 66 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 66 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 114

    addop                          shift and go to state 117

state 143

    (60) return_stmt -> RETURN expression SEMICOLON .

    RBLOCK          reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 60 (return_stmt -> RETURN expression SEMICOLON .)


state 144

    (52) selection_stmt -> IF LPAREN expression . RPAREN statement
    (53) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 156


state 145

    (65) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 157


state 146

    (93) args_list -> expression .

    COMMA           reduce using rule 93 (args_list -> expression .)
    RPAREN          reduce using rule 93 (args_list -> expression .)


state 147

    (91) args -> empty .

    RPAREN          reduce using rule 91 (args -> empty .)


state 148

    (89) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 158


state 149

    (90) args -> args_list .
    (92) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 90 (args -> args_list .)
    COMMA           shift and go to state 159


state 150

    (58) iteration_stmt -> FOR LPAREN var_declaration2 . SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 160


state 151

    (54) selection_stmt -> SWITCH LPAREN var RPAREN . statement
    (45) statement -> . expression_stmt
    (46) statement -> . compount_stmt
    (47) statement -> . selection_stmt
    (48) statement -> . iteration_stmt
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (40) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (55) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (56) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (57) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (59) return_stmt -> . RETURN SEMICOLON
    (60) return_stmt -> . RETURN expression SEMICOLON
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 99
    LBLOCK          shift and go to state 63
    IF              shift and go to state 96
    SWITCH          shift and go to state 77
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 92
    WHILE           shift and go to state 87
    FOR             shift and go to state 100
    RETURN          shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    compount_stmt                  shift and go to state 89
    term                           shift and go to state 83
    statement                      shift and go to state 161
    expression                     shift and go to state 78
    return_stmt                    shift and go to state 91
    factor                         shift and go to state 86
    iteration_stmt                 shift and go to state 94
    expression_stmt                shift and go to state 98
    selection_stmt                 shift and go to state 85

state 152

    (55) selection_stmt -> CASE NUMBER COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 162


state 153

    (57) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (45) statement -> . expression_stmt
    (46) statement -> . compount_stmt
    (47) statement -> . selection_stmt
    (48) statement -> . iteration_stmt
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (40) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (55) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (56) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (57) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (59) return_stmt -> . RETURN SEMICOLON
    (60) return_stmt -> . RETURN expression SEMICOLON
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 99
    LBLOCK          shift and go to state 63
    IF              shift and go to state 96
    SWITCH          shift and go to state 77
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 92
    WHILE           shift and go to state 87
    FOR             shift and go to state 100
    RETURN          shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    compount_stmt                  shift and go to state 89
    term                           shift and go to state 83
    statement                      shift and go to state 163
    expression                     shift and go to state 78
    return_stmt                    shift and go to state 91
    factor                         shift and go to state 86
    iteration_stmt                 shift and go to state 94
    expression_stmt                shift and go to state 98
    selection_stmt                 shift and go to state 85

state 154

    (63) expression -> var EQUAL AMPERSANT ID .

    RPAREN          reduce using rule 63 (expression -> var EQUAL AMPERSANT ID .)
    COMMA           reduce using rule 63 (expression -> var EQUAL AMPERSANT ID .)
    SEMICOLON       reduce using rule 63 (expression -> var EQUAL AMPERSANT ID .)
    RBRACKET        reduce using rule 63 (expression -> var EQUAL AMPERSANT ID .)


state 155

    (56) selection_stmt -> DEFAULT COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 164


state 156

    (52) selection_stmt -> IF LPAREN expression RPAREN . statement
    (53) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (45) statement -> . expression_stmt
    (46) statement -> . compount_stmt
    (47) statement -> . selection_stmt
    (48) statement -> . iteration_stmt
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (40) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (55) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (56) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (57) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (59) return_stmt -> . RETURN SEMICOLON
    (60) return_stmt -> . RETURN expression SEMICOLON
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 99
    LBLOCK          shift and go to state 63
    IF              shift and go to state 96
    SWITCH          shift and go to state 77
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 92
    WHILE           shift and go to state 87
    FOR             shift and go to state 100
    RETURN          shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    compount_stmt                  shift and go to state 89
    term                           shift and go to state 83
    statement                      shift and go to state 165
    expression                     shift and go to state 78
    return_stmt                    shift and go to state 91
    factor                         shift and go to state 86
    iteration_stmt                 shift and go to state 94
    expression_stmt                shift and go to state 98
    selection_stmt                 shift and go to state 85

state 157

    (65) var -> ID LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 65 (var -> ID LBRACKET expression RBRACKET .)


state 158

    (89) call -> ID LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    DEQUAL          reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    DISTINT         reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 89 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 89 (call -> ID LPAREN args RPAREN .)


state 159

    (92) args_list -> args_list COMMA . expression
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    term                           shift and go to state 83
    expression                     shift and go to state 166
    factor                         shift and go to state 86

state 160

    (58) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON . expression SEMICOLON additive_expression RPAREN statement
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    var                            shift and go to state 88
    simple_expression              shift and go to state 79
    term                           shift and go to state 83
    expression                     shift and go to state 167
    factor                         shift and go to state 86

state 161

    (54) selection_stmt -> SWITCH LPAREN var RPAREN statement .

    RBLOCK          reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SEMICOLON       reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LBLOCK          reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IF              reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SWITCH          reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CASE            reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DEFAULT         reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    WHILE           reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FOR             reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RETURN          reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ID              reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LPAREN          reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    NUMBER          reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    BREAK           reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSE            reduce using rule 54 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)


state 162

    (55) selection_stmt -> CASE NUMBER COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 168


state 163

    (57) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    RBLOCK          reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 57 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 164

    (56) selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .

    RBLOCK          reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 56 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)


state 165

    (52) selection_stmt -> IF LPAREN expression RPAREN statement .
    (53) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBLOCK          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 169

  ! ELSE            [ reduce using rule 52 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 166

    (92) args_list -> args_list COMMA expression .

    COMMA           reduce using rule 92 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 92 (args_list -> args_list COMMA expression .)


state 167

    (58) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression . SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 170


state 168

    (55) selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .

    RBLOCK          reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 55 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)


state 169

    (53) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (45) statement -> . expression_stmt
    (46) statement -> . compount_stmt
    (47) statement -> . selection_stmt
    (48) statement -> . iteration_stmt
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (40) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (55) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (56) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (57) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (59) return_stmt -> . RETURN SEMICOLON
    (60) return_stmt -> . RETURN expression SEMICOLON
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 99
    LBLOCK          shift and go to state 63
    IF              shift and go to state 96
    SWITCH          shift and go to state 77
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 92
    WHILE           shift and go to state 87
    FOR             shift and go to state 100
    RETURN          shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    compount_stmt                  shift and go to state 89
    term                           shift and go to state 83
    statement                      shift and go to state 171
    expression                     shift and go to state 78
    return_stmt                    shift and go to state 91
    factor                         shift and go to state 86
    iteration_stmt                 shift and go to state 94
    expression_stmt                shift and go to state 98
    selection_stmt                 shift and go to state 85

state 170

    (58) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON . additive_expression RPAREN statement
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (89) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84
    ID              shift and go to state 97

    call                           shift and go to state 76
    additive_expression            shift and go to state 172
    factor                         shift and go to state 86
    term                           shift and go to state 83
    var                            shift and go to state 136

state 171

    (53) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    RBLOCK          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBLOCK          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 172

    (58) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression . RPAREN statement
    (75) additive_expression -> additive_expression . addop term
    (79) addop -> . PLUS
    (80) addop -> . MINUS

    RPAREN          shift and go to state 173
    PLUS            shift and go to state 123
    MINUS           shift and go to state 114

    addop                          shift and go to state 117

state 173

    (58) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN . statement
    (45) statement -> . expression_stmt
    (46) statement -> . compount_stmt
    (47) statement -> . selection_stmt
    (48) statement -> . iteration_stmt
    (49) statement -> . return_stmt
    (50) expression_stmt -> . expression SEMICOLON
    (51) expression_stmt -> . SEMICOLON
    (40) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (52) selection_stmt -> . IF LPAREN expression RPAREN statement
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (55) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (56) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (57) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (59) return_stmt -> . RETURN SEMICOLON
    (60) return_stmt -> . RETURN expression SEMICOLON
    (61) expression -> . var EQUAL expression
    (62) expression -> . simple_expression
    (63) expression -> . var EQUAL AMPERSANT ID
    (64) var -> . ID
    (65) var -> . ID LBRACKET expression RBRACKET
    (66) simple_expression -> . additive_expression relop additive_expression
    (67) simple_expression -> . additive_expression
    (75) additive_expression -> . additive_expression addop term
    (76) additive_expression -> . term
    (77) additive_expression -> . term MINUSMINUS
    (78) additive_expression -> . term PLUSPLUS
    (81) term -> . term mulop factor
    (82) term -> . factor
    (85) factor -> . LPAREN expression RPAREN
    (86) factor -> . var
    (87) factor -> . call
    (88) factor -> . NUMBER
    (89) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 99
    LBLOCK          shift and go to state 63
    IF              shift and go to state 96
    SWITCH          shift and go to state 77
    CASE            shift and go to state 81
    DEFAULT         shift and go to state 92
    WHILE           shift and go to state 87
    FOR             shift and go to state 100
    RETURN          shift and go to state 95
    ID              shift and go to state 97
    LPAREN          shift and go to state 80
    NUMBER          shift and go to state 84

    call                           shift and go to state 76
    additive_expression            shift and go to state 93
    simple_expression              shift and go to state 79
    var                            shift and go to state 88
    compount_stmt                  shift and go to state 89
    term                           shift and go to state 83
    statement                      shift and go to state 174
    expression                     shift and go to state 78
    return_stmt                    shift and go to state 91
    factor                         shift and go to state 86
    iteration_stmt                 shift and go to state 94
    expression_stmt                shift and go to state 98
    selection_stmt                 shift and go to state 85

state 174

    (58) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .

    RBLOCK          reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SEMICOLON       reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    IF              reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SWITCH          reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CASE            reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    WHILE           reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FOR             reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RETURN          reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ID              reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LPAREN          reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    NUMBER          reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    BREAK           reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSE            reduce using rule 58 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 165 resolved as shift
